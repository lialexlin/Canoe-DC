### URL
https://api.canoesoftware.com/docs/#introduction

{
  "openapi": "3.0.0",
  "info": {
      "title": null,
      "version": null
  },
  "paths": {
      "Request": {
          "get": {
              "tags": [
                  "Introduction"
              ],
              "summary": null,
              "description": "Canoe's API provides methods for retrieving extracted data from documents and their metadata as well as data from downloaded PDFs. This documentation includes detailed explanations of API endpoints and examples. You may not have access to all of the listed endpoints depending on the services you've purchased from Canoe as well as your user permissions.\n<p>By using Canoe’s API Documentation, you agree to the most recent version of <a href=\"https://developers.addepar.com/docs/terms-of-use\" target=\"_blank\">Canoe’s Developer Portal Terms of Use.</a></p>\n<p>In addition to the <code class=\"prettyprint\">curl</code>, <code class=\"prettyprint\">javascript</code>, <code class=\"prettyprint\">python</code>, <code class=\"prettyprint\">php</code> and <code class=\"prettyprint\">CSharp</code> examples next to each endpoint, we've also included a <a href=\"https://www.getpostman.com\" target=\"_blank\">Postman</a> collection. The collection contains API calls for each available endpoint.  Postman is a tool that helps generate and test API calls by providing a clean interface to build and save HTTP requests, and to check and test API responses. </p>\n\n<p>\n    Note: Download Postman from their official website. Find out more about how to import Postman collections <a href=\"https://learning.getpostman.com/docs/postman/collections/data_formats/#importing-postman-data\" target=\"_blank\"><u>here</u></a>.\n</p>\n<p>\n    Your information security team may require whitelisting Canoe’s IP addresses before you can call the API.  Whitelist the IP addresses found in <a href=\"https://client.canoesoftware.com/knowledge-base#/api/canoe-api-overview\" target=\"_blank\"><u>this knowledge base page</u></a> to allow all API addresses of Canoe. <b>(Note: You must be logged into your Canoe account to access the knowledge base page)</b>\n</p>\n<p>\n    Your information technology team may require you to open ports to call the API. The API uses port numbers 443 and 9443.\n</p>\n<p>\n    Additionally, your information security team may request that Canoe limit the IP address(es) from which you can make API calls as an extra layer of data protection. If so, please reach out to our support team.\n</p>\n\n<br>\n<strong><u>Request:</u></strong>\n\nThe base URL for all Canoe API requests is <code class=\"prettyprint\">https://api.canoesoftware.com</code>\n\nThe API is built on RESTful principles with resource-oriented URL endpoints. HTTP status codes are used to indicate any API errors and all responses are returned in JSON format. All requests must be made over an HTTPS connection to ensure a secure transmission of data. Following a RESTful structure, requests should hit API endpoints using the appropriate HTTP method, which will depend on the desired action:\n\n<table><thead>\n    <tr>\n        <th>Method</th>\n        <th>Description</th>\n    </tr>\n    </thead><tbody>\n    <tr>\n        <td>GET</td>\n        <td>Use the <strong>GET</strong> method to retrieve information about your users, their organizations, and available associated data. This will always be a read-only request, so queried objects will never be modified by a GET request. When using filter parameters that include special characters, you should always encode those values to fit URI specifications.</td>\n    </tr>\n    <tr>\n        <td>POST</td>\n        <td>Use a <strong>POST</strong> method to create a new object, such as a new user or organization. Request parameters should be given in JSON format. The response body will typically return the newly created resource.</td>\n    </tr>\n    <tr>\n        <td>PUT</td>\n        <td>Use a <strong>PUT</strong> method to update an object, such as updating user credentials. As with a POST request, parameters should be given in JSON format. If successful, the response body will typically return the modified object.</td>\n    </tr>\n    <tr>\n        <td>DELETE</td>\n        <td>Use a <strong>DELETE</strong> method to delete an object, such as deleting one of your funds. Successful DELETE requests will typically return an empty response body.</td>\n    </tr>\n    </tbody></table>\n",
              "operationId": "IntroductionRequest"
          }
      },
      "Response": {
          "get": {
              "tags": [
                  "Introduction"
              ],
              "summary": null,
              "description": "<strong><u>Response:</u></strong>\n\n<p>All non-empty response bodies, including errors, will be formatted as a JSON object. If you are fetching multiple entries, such as <code class=\"prettyprint\">/v1/funds</code> example, the data will be returned as a list. If you are fetching a single entry, such as <code class=\"prettyprint\">GET /v1/funds/1</code>, the data will be returned as a single object.</p>\n<p>Canoe's APIs use standard HTTP status codes to indicate the status of a request.</p>\n<p>Below is a brief overview of the most common status codes:</p>\n<table><thead>\n    <tr>\n        <th>Code</th>\n        <th>Text</th>\n        <th>Definition</th>\n    </tr>\n    </thead><tbody>\n    <tr>\n        <td>200</td>\n        <td>OK</td>\n        <td>Success!</td>\n    </tr>\n    <tr>\n        <td>400</td>\n        <td>Bad Request</td>\n        <td>The request was invalid or cannot be otherwise served. This could be due to an invalid or malformed parameter, etc.</td>\n    </tr>\n    <tr>\n        <td>401</td>\n        <td>Unauthorized</td>\n        <td>The API authentication credentials or access token are missing or incorrect.</td>\n    </tr>\n    <tr>\n        <td>403</td>\n        <td>Forbidden</td>\n        <td>The credentials or access token are authenticated, but you do not have access to the requested resource.</td>\n    </tr>\n    <tr>\n        <td>404</td>\n        <td>Not Found</td>\n        <td>The requested resource is invalid or the resource requested, such as a Fund, does not exist. The 404 status code might indicates that the REST API can't map the client's URI to a resource but may be available in the future.</td>\n    </tr>\n    <tr>\n        <td>405</td>\n        <td>Method Not Allowed</td>\n        <td>The request tried to use an HTTP method that the resource does not allow. For instance, a read-only resource could support only GET, but not PUT or DELETE or POST.</td>\n    </tr>\n    <tr>\n        <td>500</td>\n        <td>Internal Server Error</td>\n        <td>There are internal or API-related errors on Canoe's side. Additional requests will not resolve the issue.</td>\n    </tr>\n    <tr>\n        <td>503</td>\n        <td>Service Unavailable</td>\n        <td>The Canoe servers are up, but overloaded with requests. Try again later.</td>\n    </tr>\n    </tbody></table>\n",
              "operationId": "IntroductionResponse"
          }
      },
      "Get Allocations": {
          "get": {
              "tags": [
                  "Allocations"
              ],
              "summary": null,
              "description": "/v1/allocations\n\nFetch all allocations accessible by the current API user.\n",
              "operationId": "GetAllocation",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all documents on page 2. By default, this is set to 1.",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "perPage",
                      "in": "query",
                      "description": "The number of allocations displayed on each page. The maximum number of allocations as well as the default is 100.",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "perPage": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "allocation_id",
                      "in": "query",
                      "description": "Returns exact allocation record for a specific id. Multiple ids are separated by a comma. Example:- allocation_id1, allocation_id2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "allocation_id single": {
                              "value": "allocation_id12"
                          },
                          "allocation_id multiple": {
                              "value": "allocation_id1,allocation_id2"
                          }
                      }
                  },
                  {
                      "name": "entity_id",
                      "in": "query",
                      "description": "Returns exact match on Entity ID that is directly associated to the allocation. Multiple ids are separated by a comma. Example:- entity_3",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "entity_id single": {
                              "value": "entity_id1"
                          },
                          "entity_id multiple": {
                              "value": "entity_id1,entity_id2"
                          }
                      }
                  },
                  {
                      "name": "investment_id",
                      "in": "query",
                      "description": "Returns exact allocations related to a specific investment/term. Multiple ids are separated by a comma. Example:- investment_id1, investment_id2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "investment_id single": {
                              "value": "investment_id1"
                          },
                          "investment_id multiple": {
                              "value": "investment_id1,investment_id2"
                          }
                      }
                  },
                  {
                      "name": "custom_allocation_id",
                      "in": "query",
                      "description": "Returns exact allocations related to a specific tenant assigned investment id. Multiple ids are separated by a comma. Example:- customId1, customId2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_allocation_id single": {
                              "value": "custom_allocation_id_1"
                          },
                          "custom_allocation_id multiple": {
                              "value": "custom_allocation_id_1,custom_allocation_id_2"
                          }
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "description": "Returns allocations related to a specific status. Valid Status values are active, pending, retired, or transitional. Multiple ids are separated by a comma. Example:- active, pending",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "status 1": {
                              "value": "active"
                          },
                          "status 2": {
                              "value": "pending"
                          },
                          "status multiple": {
                              "value": "active,pending"
                          }
                      }
                  },
                  {
                      "name": "account_id",
                      "in": "query",
                      "description": "Returns allocations related to a specific account. Multiple ids are separated by a comma. Example:- account_1, account_2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "account_id single": {
                              "value": "account_1"
                          },
                          "account_id multiple": {
                              "value": "account_1,account_2"
                          }
                      }
                  },
                  {
                      "name": "custom_field",
                      "in": "query",
                      "description": "An indexed string of one or more custom field IDs, which relate to allocation specific custom fields, and one or more custom field values for each. Specify the custom field ID and then the custom field value(s). When filtering on multiple values, separate them by commas.  Filter on additional custom fields by separating with an ampersand. Example:- /v1/allocations?custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2;custom_field[another-custom-field-id]=another-value1",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_field": {
                              "value": "custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n      -G \"https://api.canoesoftware.com/v1/allocations?page=1&perPage=50&allocation_id=investment_1&entity_id=entity_3\" \\\n      -H \"Authorization: Bearer {token}\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/allocations\"\n      );\n\n      let params = {\n          \"page\": \"1\",\n          \"perPage\": \"50\",\n          \"allocation_id\":\"investment_1\",\n          \"entity_id\":\"entity_3\"\n      };\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/allocation',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/allocations'\n      params = {\n        'page': '1',\n        'perPage': '50',\n        'allocation_id':'investment_1',\n        'entity_id':'entity_3'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/allocations\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"perPage\", \"50\");\n      request.AddQueryParameter(\"allocation_id\", \"investment_1\");\n      request.AddQueryParameter(\"entity_id\", \"entity_3\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Allocations"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "No access to the document."
                  }
              }
          }
      },
      "Create A Single Allocation": {
          "post": {
              "tags": [
                  "Allocations"
              ],
              "summary": null,
              "description": "/v1/allocations\n\nCreate a new allocation based on the input parameters.\n",
              "operationId": "CreateSingleAllocation",
              "parameters": [
                  {
                      "name": "entity_id",
                      "in": "body",
                      "description": "The ID of the Entity in Canoe.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "entity 1": "entity_1"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "body",
                      "description": "The ID of the Investment/Fund in Canoe.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "fund_id": "investment_1"
                          }
                      }
                  },
                  {
                      "name": "term_id",
                      "in": "body",
                      "description": "The ID of the term at canoe. If not provided, the default term will be assigned.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "term_id": "term_1"
                          }
                      }
                  },
                  {
                      "name": "initial_date",
                      "in": "body",
                      "description": "Allocation inception Date. Its format is yyyy-mm-dd.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "initial_date": "2021-01-01"
                          }
                      }
                  },
                  {
                      "name": "initial_amount",
                      "in": "body",
                      "description": "The initial amount for the allocation. Value must be greater than 0.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "initial_amount": 10000
                          }
                      }
                  },
                  {
                      "name": "status",
                      "in": "body",
                      "description": "Indicates whether an allocation is active. The status can be active, pending, retired, or transitional. If not provided, the default is active.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "status": "active"
                          }
                      }
                  },
                  {
                      "name": "custom_allocation_id",
                      "in": "body",
                      "description": "The custom allocation ID you'd like to associate the allocation with.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "custom_allocation_id": 700
                          }
                      }
                  },
                  {
                      "name": "downstream_ids",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": "black_diamond_account_name",
                                      "value": "sample_name"
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "downstream_ids.*.id",
                      "in": "body",
                      "description": "ID of the allocation downstream system identifier. Possible options are black_diamond_account_name, black_diamond_account_number, archway_portfolio_id, investment_metrics_account_short_name.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": "black_diamond_account_name"
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "downstream_ids.*.value",
                      "in": "body",
                      "description": "The value for the specified downstream system identifier.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": "sample_name"
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "custom_fields": [
                                  {
                                      "id": 1,
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.id",
                      "in": "body",
                      "description": "ID of the allocation custom field. This can be retrieved by using the Get Allocations endpoint.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": 1
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "allocation_entity_aliases",
                      "in": "body",
                      "description": "Aliases of the allocation entity name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "allocation_entity_aliases": "Sample allocation entity alias 1,Sample allocation entity alias 2"
                          }
                      }
                  },
                  {
                      "name": "allocation_fund_aliases",
                      "in": "body",
                      "description": "Aliases of the allocation fund name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "allocation_fund_aliases": "Sample allocation fund alias 1,Sample allocation fund alias 2"
                          }
                      }
                  },
                  {
                      "name": "retired_at",
                      "in": "body",
                      "description": "Allocation retire date. Retired date must be provided if the status is set to retired and should be at least one month after the initial investment date.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "retired_at": "2022-01-01"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/allocations\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"entity_id\":\"entity_1\",\"fund_id\":\"investment_1\",\"initial_date\":\"2021-01-01\",\"initial_amount\":\"10000\",\"status\":\"active\",\"custom_allocation_id\":\"700\",\"downstream_ids\":[{\"id\":\"black_diamond_account_name\",\"value\":\"sample_name\"}],\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}],\"allocation_entity_aliases\":\"Sample allocation entity alias 1,Sample allocation entity alias 2\",\"allocation_fund_aliases\":\"Sample allocation fund alias 1,Sample allocation fund alias 2\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n        \"https://api.canoesoftware.com/v1/allocations\"\n      );\n\n      let headers = {\n        \"Authorization\": \"Bearer {token}\",\n        \"Accept\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n        \"entity_id\": \"entity_1\",\n        \"fund_id\": \"investment_1\",\n        \"initial_date\": \"2021-01-01\",\n        \"initial_amount\": \"10000\",\n        \"status\": \"active\",\n        \"custom_allocation_id\": \"700\",\n        \"downstream_ids\": [\n          {\n            \"id\": \"black_diamond_account_name\",\n            \"value\": \"sample_name\"\n          }\n        ],\n        \"custom_fields\": [\n          {\n            \"id\": \"1\",\n            \"value\": \"1000\"\n          }\n        ],\n        \"allocation_entity_aliases\": \"Sample allocation entity alias 1,Sample allocation entity alias 2\",\n        \"allocation_fund_aliases\": \"Sample allocation fund alias 1,Sample allocation fund alias 2\"\n      }\n      fetch(url, {\n        method: \"POST\",\n        headers: headers,\n        body: body\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n        'https://api.canoesoftware.com/v1/allocations',\n        [\n          'headers' => [\n            'Authorization' => 'Bearer {token}',\n                    'Accept' => 'application/json',\n            'X-Requested-With' => 'XMLHttpRequest',\n            'Content-Type' => 'application/json',\n          ],\n          'json' => [\n            'entity_id' => 'entity_1',\n            'fund_id' => 'investment_1',\n            'initial_date' => '2021-01-01',\n            'initial_amount' => '10000',\n            'status' => 'active',\n            'custom_allocation_id' => '700',\n            'downstream_ids' => [\n              [\n                'id' => 'black_diamond_account_name',\n                'value' => 'sample_name',\n              ],\n            ],\n            'custom_fields' => [\n              [\n                'id' => '1',\n                'value' => '1000',\n              ],\n            ],\n            'allocation_entity_aliases' => 'Sample allocation entity alias 1,Sample allocation entity alias 2',\n            'allocation_fund_aliases' => 'Sample allocation fund alias 1,Sample allocation fund alias 2',\n          ],\n        ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/allocations'\n      params = {\n        'page': '1',\n        'perPage': '50',\n        'allocation_id':'investment_1',\n        'entity_id':'entity_3'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/allocations\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n        entity_id = \"entity_1\",\n        fund_id = \"investment_1\",\n        initial_date = \"2021-01-01\",\n        initial_amount = \"10000\",\n        status = \"active\",\n        custom_allocation_id = 700,\n        downstream_ids = new[]\n        {\n          new { id = black_diamond_account_name, value = sample_name }\n        },\n        custom_fields = new[]\n        {\n          new { id = 1, value = 100 }\n        },\n        allocation_entity_aliases = \"Sample allocation entity alias 1,Sample allocation entity alias 2\",\n        allocation_fund_aliases = \"Sample allocation fund alias 1,Sample allocation fund alias 2\"\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SingleAllocation"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Failed to create the allocation."
                  },
                  "422": {
                      "description": "The date entered should have the format yyyy-mm-dd."
                  }
              }
          }
      },
      "Update A Single Allocation": {
          "put": {
              "tags": [
                  "Allocations"
              ],
              "summary": null,
              "description": "/v1/allocations/{id}\n\nUpdate an existing allocation based on the input parameters.\n",
              "operationId": "UpdateSingleAllocation",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the allocation you want to edit.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "initial_date",
                      "in": "body",
                      "description": "Allocation inception Date. Its format is yyyy-mm-dd.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "initial_date": "2021-01-01T00:00:00.000Z"
                          }
                      }
                  },
                  {
                      "name": "initial_amount",
                      "in": "body",
                      "description": "The initial amount for the allocation. Value must be greater than 0.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "initial_amount": 10000
                          }
                      }
                  },
                  {
                      "name": "status",
                      "in": "body",
                      "description": "Indicates whether an allocation is active. The status can be active, pending, retired, or transitional. If not provided, the default is active.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "initial_amount": "active"
                          }
                      }
                  },
                  {
                      "name": "custom_allocation_id",
                      "in": "body",
                      "description": "The custom allocation ID you'd like to associate the allocation with.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "custom_allocation_id": 123
                          }
                      }
                  },
                  {
                      "name": "downstream_ids",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": "black_diamond_account_name",
                                      "value": "sample_name"
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "downstream_ids.*.id",
                      "in": "body",
                      "description": "ID of the allocation downstream system identifier. Possible options are black_diamond_account_name, black_diamond_account_number, archway_portfolio_id, investment_metrics_account_short_name.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": "black_diamond_account_name"
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "downstream_ids.*.value",
                      "in": "body",
                      "description": "The value for the specified downstream system identifier.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": "sample_name"
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "custom_fields": [
                                  {
                                      "id": 1,
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.id",
                      "in": "body",
                      "description": "ID of the allocation custom field. This can be retrieved by using the Get Allocations endpoint.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": 1
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "allocation_entity_aliases",
                      "in": "body",
                      "description": "Aliases of the allocation entity name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "allocation_entity_aliases": "Sample allocation entity alias 1,Sample allocation entity alias 2"
                          }
                      }
                  },
                  {
                      "name": "allocation_fund_aliases",
                      "in": "body",
                      "description": "Aliases of the allocation fund name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "allocation_fund_aliases": "Sample allocation fund alias 1,Sample allocation fund alias 2"
                          }
                      }
                  },
                  {
                      "name": "retired_at",
                      "in": "body",
                      "description": "Allocation retire date. Retired date must be provided if the status is set to retired and should be at least one month after the initial investment date.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "retired_at": "2022-01-01"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/allocations\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"entity_id\":\"entity_1\",\"fund_id\":\"investment_1\",\"initial_date\":\"2021-01-01\",\"initial_amount\":\"10000\",\"status\":\"active\",\"custom_allocation_id\":\"700\",\"downstream_ids\":[{\"id\":\"black_diamond_account_name\",\"value\":\"sample_name\"}],\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}],\"allocation_entity_aliases\":\"Sample allocation entity alias 1,Sample allocation entity alias 2\",\"allocation_fund_aliases\":\"Sample allocation fund alias 1,Sample allocation fund alias 2\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/allocations\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"entity_id\": \"entity_1\",\n          \"fund_id\": \"investment_1\",\n          \"initial_date\": \"2021-01-01\",\n          \"initial_amount\": \"10000\",\n          \"status\": \"active\",\n          \"custom_allocation_id\": \"700\",\n          \"downstream_ids\": [\n              {\n                  \"id\": \"black_diamond_account_name\",\n                  \"value\": \"sample_name\"\n              }\n          ],\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ],\n          \"allocation_entity_aliases\": \"Sample allocation entity alias 1,Sample allocation entity alias 2\",\n          \"allocation_fund_aliases\": \"Sample allocation fund alias 1,Sample allocation fund alias 2\"\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n          'https://api.canoesoftware.com/v1/allocations',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'entity_id' => 'entity_1',\n                  'fund_id' => 'investment_1',\n                  'initial_date' => '2021-01-01',\n                  'initial_amount' => '10000',\n                  'status' => 'active',\n                  'custom_allocation_id' => '700',\n                  'downstream_ids' => [\n                      [\n                          'id' => 'black_diamond_account_name',\n                          'value' => 'sample_name',\n                      ],\n                  ],\n                  'custom_fields' => [\n                      [\n                          'id' => '1',\n                          'value' => '1000',\n                      ],\n                  ],\n                  'allocation_entity_aliases' => 'Sample allocation entity alias 1,Sample allocation entity alias 2',\n                  'allocation_fund_aliases' => 'Sample allocation fund alias 1,Sample allocation fund alias 2',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/allocations'\n      payload = {\n          \"entity_id\": \"entity_1\",\n          \"fund_id\": \"investment_1\",\n          \"initial_date\": \"2021-01-01\",\n          \"initial_amount\": \"10000\",\n          \"status\": \"active\",\n          \"custom_allocation_id\": \"700\",\n          \"downstream_ids\": [\n              {\n                  \"id\": \"black_diamond_account_name\",\n                  \"value\": \"sample_name\"\n              }\n          ],\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ],\n          \"allocation_entity_aliases\": \"Sample allocation entity alias 1,Sample allocation entity alias 2\",\n          \"allocation_fund_aliases\": \"Sample allocation fund alias 1,Sample allocation fund alias 2\"\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/allocations/1\", Method.Put);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          initial_date = \"2021-01-01\",\n          initial_amount = \"10000\",\n          status = \"active\",\n          custom_allocation_id = 700,\n          downstream_ids = new[]\n          {\n              new { id = black_diamond_account_name, value = sample_name }\n          },\n          custom_fields = new[]\n          {\n              new { id = 1, value = 100 }\n          },\n          allocation_entity_aliases = \"Sample allocation entity alias 1,Sample allocation entity alias 2\",\n          allocation_fund_aliases = \"Sample allocation fund alias 1,Sample allocation fund alias 2\"\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SingleAllocation"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Failed to create the allocation."
                  },
                  "422": {
                      "description": "The date entered should have the format yyyy-mm-dd."
                  }
              }
          }
      },
      "Delete A Single Allocation": {
          "delete": {
              "tags": [
                  "Allocations"
              ],
              "summary": null,
              "description": "/v1/allocations/{id}\nDelete a specific allocation by its ID.\n",
              "operationId": "DeleteSingleAllocation",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the allocation to be deleted.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X DELETE \\\n          \"https://api.canoesoftware.com/v1/allocations/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/allocations/1\"\n      );\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n      fetch(url, {\n          method: \"DELETE\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->delete(\n          'https://api.canoesoftware.com/v1/allocations/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n      url = 'https://api.canoesoftware.com/v1/allocations/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('DELETE', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/allocations/1\", Method.Delete);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "message": "The Allocation {id} was deleted."
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "message": "Failed to delete the Allocation {$id}."
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get Document Data": {
          "get": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/data\n\nFetch documents' extracted data and metadata.\n\nBy default, Canoe's server sends back the full representation of each document object after processing requests.\nFor faster performance, you can use optional parameters to retrieve a subset of documents.\n\n<span name=\"doc-alert-info\">\nThis endpoint offers optional pagination. \nPagination supports the return of large results and is highly recommended for all use cases. \nUnpaginated calls will be depreciated in future versions of the Canoe API.\n<br><br>\nWhen using pagination, the response will contain headers defining the <code>total</code> number of results, \nas well as the <code>first</code>, <code>next</code>, <code>prev</code>, and <code>last</code> page responses for your result set. \nTo enable pagination pass a header parameter of X-API-VERSION with a value of 2022-09-19.\n</span>\n",
              "operationId": "GetDocuments",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all documents on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2022-09-19.</u> Example: 1",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each page. The maximum number of documents limit is 100. <u>This parameter is only valid if the X-API-VERSION header is set to 2022-09-19.</u> Example: 50",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields you need in the partial response. The value of the fields parameter MUST be a comma-separated (U+002C COMMA, \",\") list that refers to the name(s) of the fields to be returned.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fields": {
                              "value": "name,validated_data"
                          }
                      }
                  },
                  {
                      "name": "allocation_id",
                      "in": "query",
                      "description": "The IDs of the allocations in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "allocation_id single": {
                              "value": "allocation_1"
                          },
                          "allocation_id multiple": {
                              "value": "allocation_1,allocation_2"
                          }
                      }
                  },
                  {
                      "name": "document_id",
                      "in": "query",
                      "description": "The IDs of the documents in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_id single": {
                              "value": "document_1"
                          },
                          "document_id multiple": {
                              "value": "document_1,document_2"
                          }
                      }
                  },
                  {
                      "name": "client_document_id",
                      "in": "query",
                      "description": "The custom document IDs.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "client_document_id": {
                              "value": "client_document_id"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "query",
                      "description": "The IDs of funds in Canoe. To retrieve these, use the <code>v1/funds</code> <a href=\"#operations-Funds-GetFunds\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fund_id single": {
                              "value": "fund_1"
                          },
                          "fund_id multiple": {
                              "value": "fund_1,fund_2"
                          }
                      }
                  },
                  {
                      "name": "account_id",
                      "in": "query",
                      "description": "The IDs of accounts in Canoe. To retrieve these, use the <code>v1/organizations?type=account</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "account_id single": {
                              "value": "account_1"
                          },
                          "account_id multiple": {
                              "value": "account_1,account_2"
                          }
                      }
                  },
                  {
                      "name": "investment_entity_id",
                      "in": "query",
                      "description": "The IDs of investment entities in Canoe. To retrieve these, use the <code>v1/organizations?type=entity</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "investment_entity_id single": {
                              "value": "entity_1"
                          },
                          "investment_entity_id multiple": {
                              "value": "entity_1,entity_2"
                          }
                      }
                  },
                  {
                      "name": "document_type",
                      "in": "query",
                      "description": "The document types. To retrieve these, use the <code>v1/documents/types</code> <a href=\"#operations-Documents-GetDocumentsType\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_type single": {
                              "value": "Account Statement"
                          },
                          "document_type multiple": {
                              "value": "Account Statement,Capital Call Notice"
                          }
                      }
                  },
                  {
                      "name": "fund_sponsor",
                      "in": "query",
                      "description": "The Fund Sponsors. The entered Fund Sponsors must be an exact match, although all query parameters are case-insensitive.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fund_sponsor multiple": {
                              "value": "fund_sponsor_1,fund_sponsor_2"
                          },
                          "fund_sponsor single": {
                              "value": "fund_sponsor_1"
                          }
                      }
                  },
                  {
                      "name": "data_date_start",
                      "in": "query",
                      "description": "All documents returned will have data date <strong>greater than or equal to</strong> the given data_date_start. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "data_date_start": {
                              "value": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "data_date_end",
                      "in": "query",
                      "description": "All documents returned will have data date <strong>less than or equal to</strong> the given data_date_end. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "data_date_end": {
                              "value": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "document_status",
                      "in": "query",
                      "description": "This is the validation status determined by Canoe. For example, Complete means that Canoe has successfully categorized, recognized, extracted, and validated data from the document.<br><br>Our current statuses are:<br><br><li>Complete</li><br><li>Unknown</li><br><li>Potential Discrepancy</li><br><li>Duplicate</li><br><li>Password Protected</li><br><li>Configuration Required</li><br><li>Unsupported Formats</li><br><li>Anomaly Detected</li><br><li>Awaiting Confirmation</li><br><li>Storage Only</li><br><br>A misspelled status will return an empty array.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_status": {
                              "value": "Complete,Storage Only"
                          }
                      }
                  },
                  {
                      "name": "document_source",
                      "in": "query",
                      "description": "The method of document ingestion. These sources are:<br><br><li>Upload Engine</li><br><li>Email</li><br><li>Intralinks</li><br><li>API</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_source": {
                              "value": "Email,Upload Engine"
                          }
                      }
                  },
                  {
                      "name": "document_tag_id",
                      "in": "query",
                      "description": "The IDs of tags in Canoe. To retrieve these, use the <code>v1/documents/tags</code> <a href=\"#get-document-tags\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_tag_id": {
                              "value": "tag_1,tag_2"
                          }
                      }
                  },
                  {
                      "name": "file_upload_time_start",
                      "in": "query",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>greater than or equal to</strong> the given file_upload_time_start. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_upload_time_start": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "file_upload_time_end",
                      "in": "query",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>less than or equal to</strong> the given file_upload_time_end. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_upload_time_end": {
                              "value": "2019-03-31T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "account_group",
                      "in": "query",
                      "description": "The Account Group the documents belong to.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "account_group": {
                              "value": "Geography: North America,Geography: Europe"
                          }
                      }
                  },
                  {
                      "name": "last_modified_time_start",
                      "in": "query",
                      "description": "All documents returned will have a last updated timestamp <strong>greater than or equal to</strong> the given last_modified_time_start. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents updated on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "last_modified_time_start": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "last_modified_time_end",
                      "in": "query",
                      "description": "All documents returned will have a last updated timestamp <strong>less than or equal to</strong> the given last_modified_time_end. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents updated on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "last_modified_time_end": {
                              "value": "2019-07-31T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "is_locked",
                      "in": "query",
                      "description": "The is_locked status of the document in Canoe. Accepted values are either true or false. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "is_locked": {
                              "value": false
                          }
                      }
                  },
                  {
                      "name": "ready_for_extract",
                      "in": "query",
                      "description": "The extraction status of the document in Canoe. Accepted values are either true or false. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "ready_for_extract": {
                              "value": false
                          }
                      }
                  },
                  {
                      "name": "sum_values",
                      "in": "query",
                      "description": "Whether to return the sums of multi-data point fields in validated_data. Accepted values are either true or false. If it is set to false, multi-data points are returned as a list of values. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "sum_values": {
                              "value": false
                          }
                      }
                  },
                  {
                      "name": "approval_status",
                      "in": "query",
                      "description": "The approval status of the documents in Canoe. If searching for multiple statuses, they should be separated by commas. Valid statuses are:<br><br><li>Approved</li><br><li>Flagged</li><br><li>Ignored</li><br><li>Pending</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approval_status": {
                              "value": "Approved"
                          }
                      }
                  },
                  {
                      "name": "approved_by",
                      "in": "query",
                      "description": "The User ID of the approver of the documents in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approved_by": {
                              "value": "user_1,user_2"
                          }
                      }
                  },
                  {
                      "name": "approval_date_start",
                      "in": "query",
                      "description": "All documents returned will have an approval date <strong>greater than or equal to</strong> the given approval_date_start. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approval_date_start": {
                              "value": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "approval_date_end",
                      "in": "query",
                      "description": "All documents returned will have an approval date <strong>less than or equal to</strong> the given approval_date_end. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approval_date_end": {
                              "value": "2019-03-31"
                          }
                      }
                  },
                  {
                      "name": "assignee",
                      "in": "query",
                      "description": "The User ID of the assignee for the document in Canoe. If searching for multiple assignees, they should be separated by commas. Example:- user_1,user_2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approved_by": {
                              "value": "user_1,user_2"
                          }
                      }
                  },
                  {
                      "name": "not_document_tag_id",
                      "in": "query",
                      "description": "The IDs of tags in Canoe. To retrieve these, use the <code>v1/documents/tags</code> <a href=\"#get-document-tags\">endpoint</a>. This will search for documents that have NOT been tagged with a specified tag.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approved_by": {
                              "value": "tag_1,tag_2"
                          }
                      }
                  },
                  {
                      "name": "category",
                      "in": "query",
                      "description": "The category of the document. Our current categories are:<br><br><li>Capital Activity</li><br><li>Email</li><br><li>General Due Diligence</li><br><li>Investment Documents</li><br><li>Investment Reporting</li><br><li>Other</li><br><li>Other - General</li><br><li>Tax</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "category": {
                              "value": "Capital Activity,Email"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/documents/data?fields=name%2Cvalidated_data&document_id=document_1%2Cdocument_2&client_document_id=custom_id_16%2Ccustom_id_17&fund_id=fund_1%2Cfund_2&account_id=account_1%2Caccount_2&investment_entity_id=entity_1%2Centity_2&document_type=Account+Statement%2CCapital+Call+Notice&fund_sponsor=fund_sponsor_1%2Cfund_sponsor_2&data_date_start=2019-03-30&data_date_end=2019-07-31&document_status=Complete%2CStorage+Only&document_source=Email%2CUpload+Engine&document_tag_id=tag_1%2Ctag_2&file_upload_time_start=2019-03-30T04%3A00%3A00Z&file_upload_time_end=2019-07-31T04%3A00%3A00Z&account_group=Geography%3A+North+America%2CGeography%3A+Europe&last_modified_time_start=2019-03-30T04%3A00%3A00Z&last_modified_time_end=2019-07-31T04%3A00%3A00Z&is_locked=false&ready_for_extract=false&sum_values=false&approval_status=Approved%2CIgnored%2CFlagged&approved_by=user_1%2Cuser_2&approval_date_start=2019-03-30&approval_date_end=2019-07-31&category=Capital%20Activity\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/data\"\n      );\n\n      let params = {\n          \"page\": \"1\",\n          \"limit\": \"100\",\n          \"fields\": \"name,validated_data\",\n          \"document_id\": \"document_1,document_2\",\n          \"client_document_id\": \"custom_id_16,custom_id_17\",\n          \"fund_id\": \"fund_1,fund_2\",\n          \"account_id\": \"account_1,account_2\",\n          \"investment_entity_id\": \"entity_1,entity_2\",\n          \"document_type\": \"Account Statement,Capital Call Notice\",\n          \"fund_sponsor\": \"fund_sponsor_1,fund_sponsor_2\",\n          \"data_date_start\": \"2019-03-30\",\n          \"data_date_end\": \"2019-07-31\",\n          \"document_status\": \"Complete,Storage Only\",\n          \"document_source\": \"Email,Upload Engine\",\n          \"document_tag_id\": \"tag_1,tag_2\",\n          \"file_upload_time_start\": \"2019-03-30T04:00:00Z\",\n          \"file_upload_time_end\": \"2019-07-31T04:00:00Z\",\n          \"account_group\": \"Geography: North America,Geography: Europe\",\n          \"last_modified_time_start\": \"2019-03-30T04:00:00Z\",\n          \"last_modified_time_end\": \"2019-07-31T04:00:00Z\",\n          \"is_locked\": \"false\",\n          \"ready_for_extract\": \"false\",\n          \"sum_values\": \"false\",\n          \"approval_status\": \"Approved\",\n          \"approved_by\": \"user_1,user_2\",\n          \"approval_date_start\": \"2019-03-30\",\n          \"approval_date_end\": \"2019-07-31\",\n          \"assignee\": \"user_1,user_2\",\n          \"not_document_tag_id\": \"tag_1,tag_2\",\n          \"category\": \"Capital Activity\"\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/documents/data',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'page'=> '1',\n                  'limit'=> '100',\n                  'fields' => 'name,validated_data',\n                  'document_id' => 'document_1,document_2',\n                  'client_document_id' => 'custom_id_16,custom_id_17',\n                  'fund_id' => 'fund_1,fund_2',\n                  'account_id' => 'account_1,account_2',\n                  'investment_entity_id' => 'entity_1,entity_2',\n                  'document_type' => 'Account Statement,Capital Call Notice',\n                  'fund_sponsor' => 'fund_sponsor_1,fund_sponsor_2',\n                  'data_date_start' => '2019-03-30',\n                  'data_date_end' => '2019-07-31',\n                  'document_status' => 'Complete,Storage Only',\n                  'document_source' => 'Email,Upload Engine',\n                  'document_tag_id' => 'tag_1,tag_2',\n                  'file_upload_time_start' => '2019-03-30T04:00:00Z',\n                  'file_upload_time_end' => '2019-07-31T04:00:00Z',\n                  'account_group' => 'Geography: North America,Geography: Europe',\n                  'last_modified_time_start' => '2019-03-30T04:00:00Z',\n                  'last_modified_time_end' => '2019-07-31T04:00:00Z',\n                  'is_locked' => 'false',\n                  'ready_for_extract' => 'false',\n                  'sum_values' => 'false',\n                  'approval_status' => 'Approved,Pending',\n                  'approved_by' => 'user_1,user_2',\n                  'approval_date_start' => '2019-03-30',\n                  'approval_date_end' => '2019-07-31',\n                  'assignee' => 'user_1,user_2',\n                  'not_document_tag_id' => 'tag_1,tag_2',\n                  'category'=> 'Capital Activity'\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/data'\n      params = {\n        'page': '1',\n        'limit': '100',\n        'fields': 'name,validated_data',\n        'document_id': 'document_1,document_2',\n        'client_document_id': 'custom_id_16,custom_id_17',\n        'fund_id': 'fund_1,fund_2',\n        'account_id': 'account_1,account_2',\n        'investment_entity_id': 'entity_1,entity_2',\n        'document_type': 'Account Statement,Capital Call Notice',\n        'fund_sponsor': 'fund_sponsor_1,fund_sponsor_2',\n        'data_date_start': '2019-03-30',\n        'data_date_end': '2019-07-31',\n        'document_status': 'Complete,Storage Only',\n        'document_source': 'Email,Upload Engine',\n        'document_tag_id': 'tag_1,tag_2',\n        'file_upload_time_start': '2019-03-30T04:00:00Z',\n        'file_upload_time_end': '2019-07-31T04:00:00Z',\n        'account_group': 'Geography: North America,Geography: Europe',\n        'last_modified_time_start': '2019-03-30T04:00:00Z',\n        'last_modified_time_end': '2019-07-31T04:00:00Z',\n        'is_locked': 'false',\n        'ready_for_extract': 'false',\n        'sum_values': 'false',\n        'approval_status': 'Approved',\n        'approved_by': 'user_1,user_2',\n        'approval_date_start': '2019-03-30',\n        'approval_date_end': '2019-07-31'\n        'assignee': 'user_1,user_2',\n        'not_document_tag_id': 'tag_1,tag_2',\n        'category': 'Capital Activity'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/data\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"limit\", \"100\");\n      request.AddQueryParameter(\"fields\", \"name,validated_data\");\n      request.AddQueryParameter(\"document_id\", \"document_1,document_2\");\n      request.AddQueryParameter(\"client_document_id\", \"custom_id_16,custom_id_17\");\n      request.AddQueryParameter(\"fund_id\", \"fund_1,fund_2\");\n      request.AddQueryParameter(\"account_id\", \"account_1,account_2\");\n      request.AddQueryParameter(\"investment_entity_id\", \"entity_1,entity_2\");\n      request.AddQueryParameter(\"document_type\", \"Account Statement,Capital Call Notice\");\n      request.AddQueryParameter(\"fund_sponsor\", \"fund_sponsor_1,fund_sponsor_2\");\n      request.AddQueryParameter(\"data_date_start\", \"2019-03-30\");\n      request.AddQueryParameter(\"data_date_end\", \"2019-07-31\");\n      request.AddQueryParameter(\"document_status\", \"Complete,Storage Only\");\n      request.AddQueryParameter(\"document_source\", \"Email,Upload Engine\");\n      request.AddQueryParameter(\"document_tag_id\", \"tag_1,tag_2\");\n      request.AddQueryParameter(\"file_upload_time_start\", \"2019-03-30T04:00:00Z\");\n      request.AddQueryParameter(\"file_upload_time_end\", \"2019-07-31T04:00:00Z\");\n      request.AddQueryParameter(\"account_group\", \"Geography: North America,Geography: Europe\");\n      request.AddQueryParameter(\"last_modified_time_start\", \"2019-03-30T04:00:00Z\");\n      request.AddQueryParameter(\"last_modified_time_end\", \"2019-07-31T04:00:00Z\");\n      request.AddQueryParameter(\"is_locked\", \"false\");\n      request.AddQueryParameter(\"ready_for_extract\", \"false\");\n      request.AddQueryParameter(\"sum_values\", \"false\");\n      request.AddQueryParameter(\"approval_status\", \"Approved\");\n      request.AddQueryParameter(\"approved_by\", \"user_1,user_2\");\n      request.AddQueryParameter(\"approval_date_start\", \"2019-03-30\");\n      request.AddQueryParameter(\"approval_date_end\", \"2019-07-31\");\n      request.AddQueryParameter(\"assignee\", \"user_1,user_2\");\n      request.AddQueryParameter(\"not_document_tag_id\", \"tag_1,tag_2\");\n      request.AddQueryParameter(\"category\", \"Capital Activity\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Document"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "No access to the document."
                  }
              }
          }
      },
      "Get Document Types": {
          "get": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/types\n\nFetch all available document types.\n\nDocument types are further divided into two levels: 'client_document' and 'general_document.'\n\nDocument types in the client_document level include:\n\n    • Account Statement\n\n    • Capital Call Notice\n\n    • Capital Distribution Notice\n\n    • Executed Investment Document\n\n    • Expenses\n\n    • Form 1099\n\n    • Form 8621 (PFIC)\n\n    • Form ADV\n\n    • Invoices\n\n    • K-1\n\n    • Other (Category: General Due Diligence)\n\n    • Other (Category: Investment Reporting)\n\n    • Other (Category: Other)\n\n    • Redemption Notice\n\n    • Statement of Unfunded Notice\n\n    • Stock Distribution Notice\n\n    • Subscription Notice\n\n    • Tax Estimate\n\n    • Wire Confirmation\n\nDocument types in the general_document level include:\n\n    • Compliance Documents\n\n    • Due Diligence Questionnaire\n\n    • Email Correspondence\n\n    • Fact Sheet\n\n    • Financials\n\n    • Investment Memo\n\n    • Investor Letter\n\n    • Limited Partnership Agreement\n\n    • Marketing Material\n\n    • Notes\n\n    • Offering Summary\n\n    • Other (Category: Tax)\n\n    • Other (Category: Other)\n\n    • Other (Category: Investment Documents)\n\n    • Performance Estimate Email\n\n    • Private Placement Memorandum\n\n    • Quarterly Report\n\n    • Subscription Document\n\n    • Term Sheet\n\n    • Update\n\n    • Unknown\n",
              "operationId": "GetDocumentsType",
              "parameters": null,
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/documents/types\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/types\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/documents/types',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/types'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/types\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": [
                                          {
                                              "id": "id_of_the_account_statement_document_type",
                                              "key": "account_statement",
                                              "level": "client_document",
                                              "category": "Capital Activity",
                                              "document_type": "Account Statement"
                                          },
                                          {
                                              "id": "id_of_the_capital_call_notice_document_type",
                                              "key": "call_notice",
                                              "level": "client_document",
                                              "category": "Capital Activity",
                                              "document_type": "Capital Call Notice"
                                          }
                                      ]
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get Document Tags": {
          "get": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/tags\n\nFetch all available document tags.\n",
              "operationId": "GetDocumentTags",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all tags data on page 2. By default, this is set to 1.",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of tags displayed on each page. The maximum number of tags as well as the default is 100.",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 100
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/documents/tags?page=1&limit=100\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/tags\"\n      );\n\n      let params = {\n          \"page\": \"1\",\n          \"limit\": \"100\",\n      }\n\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n        'https://api.canoesoftware.com/v1/documents/tags',\n        [\n          'headers' => [\n            'Authorization' => 'Bearer {token}',\n            'Accept' => 'application/json',\n            'X-Requested-With' => 'XMLHttpRequest',\n          ],\n          'query' => [\n            'page' => '1',\n            'limit' => '100'\n          ],\n        ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/tags'\n      params = {\n        'page': '1',\n        'limit': '100',\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/tags\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"limit\", \"100\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "data": [
                                              {
                                                  "id": "1",
                                                  "name": "tag_1"
                                              },
                                              {
                                                  "id": "2",
                                                  "name": "tag_2"
                                              }
                                          ],
                                          "pageInfo": {
                                              "first": "https://api.canoesoftware.com/v1/documents/tags?page=1",
                                              "last": "https://api.canoesoftware.com/v1/documents/tags?page=1",
                                              "prev": null,
                                              "next": null,
                                              "current_page": 1,
                                              "from": 1,
                                              "last_page": 1,
                                              "path": "https://api.canoesoftware.com/v1/documents/tags",
                                              "per_page": 100,
                                              "to": 2,
                                              "total": 2
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get Document Allocation Tags": {
          "get": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/allocation-tags\n\nFetch all available document allocation tags.\n",
              "operationId": "GetDocumentAllocationTags",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all tags data on page 2. By default, this is set to 1.",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of tags displayed on each page. The maximum number of tags as well as the default is 100.",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 100
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/documents/allocation-tags?page=1&limit=100\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/allocation-tags\"\n      );\n\n      let params = {\n          \"page\": \"1\",\n          \"limit\": \"100\",\n      }\n\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n        'https://api.canoesoftware.com/v1/documents/allocation-tags',\n        [\n          'headers' => [\n            'Authorization' => 'Bearer {token}',\n            'Accept' => 'application/json',\n            'X-Requested-With' => 'XMLHttpRequest',\n          ],\n          'query' => [\n            'page' => '1',\n            'limit' => '100'\n          ],\n        ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/allocation-tags'\n      params = {\n        'page': '1',\n        'limit': '100',\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/allocation-tags\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"limit\", \"100\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "data": [
                                              {
                                                  "id": "1",
                                                  "name": "tag_1"
                                              },
                                              {
                                                  "id": "2",
                                                  "name": "tag_2"
                                              }
                                          ],
                                          "pageInfo": {
                                              "first": "https://api.canoesoftware.com/v1/documents/allocation-tags?page=1",
                                              "last": "https://api.canoesoftware.com/v1/documents/allocation-tags?page=1",
                                              "prev": null,
                                              "next": null,
                                              "current_page": 1,
                                              "from": 1,
                                              "last_page": 1,
                                              "path": "https://api.canoesoftware.com/v1/documents/allocation-tags",
                                              "per_page": 100,
                                              "to": 2,
                                              "total": 2
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Delete Multiple Documents": {
          "post": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/delete-documents\n\nDelete up to 100 documents by filtering with the current parameters. At least one parameter is required in the request.\n",
              "operationId": "DeleteMultipleDocuments",
              "parameters": [
                  {
                      "name": "document_id",
                      "in": "body",
                      "description": "The IDs of the documents in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_id": "document_1,document_2"
                          }
                      }
                  },
                  {
                      "name": "client_document_id",
                      "in": "body",
                      "description": "The custom document IDs.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_document_id": "custom_id_16,custom_id_17"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "body",
                      "description": "The IDs of funds in Canoe. To retrieve these, use the <code>v1/funds</code> <a href=\"#operations-Funds-GetFunds\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "fund_id": "fund_1,fund_2"
                          }
                      }
                  },
                  {
                      "name": "account_id",
                      "in": "body",
                      "description": "The IDs of accounts in Canoe. To retrieve these, use the <code>v1/organizations?type=account</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "account_id": "account_1,account_2"
                          }
                      }
                  },
                  {
                      "name": "investment_entity_id",
                      "in": "body",
                      "description": "The IDs of investment entities in Canoe. To retrieve these, use the <code>v1/organizations?type=entity</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "investment_entity_id": "entity_1,entity_2"
                          }
                      }
                  },
                  {
                      "name": "document_type",
                      "in": "body",
                      "description": "The document types. To retrieve these, use the <code>v1/documents/types</code> <a href=\"#operations-Documents-GetDocumentsType\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_type": "Account Statement,Capital Call Notice"
                          }
                      }
                  },
                  {
                      "name": "fund_sponsor",
                      "in": "body",
                      "description": "The Fund Sponsors. The entered Fund Sponsors must be an exact match, although all query parameters are case-insensitive.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "fund_sponsor": "fund_sponsor_1,fund_sponsor_2"
                          }
                      }
                  },
                  {
                      "name": "data_date_start",
                      "in": "body",
                      "description": "All documents returned will have data date <strong>greater than or equal to</strong> the given data_date_start. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "data_date_start": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "data_date_end",
                      "in": "body",
                      "description": "All documents returned will have data date <strong>less than or equal to</strong> the given data_date_end. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "data_date_end": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "document_status",
                      "in": "body",
                      "description": "This is the validation status determined by Canoe. For example, Complete means that Canoe has successfully categorized, recognized, extracted, and validated data from the document.<br><br>Our current statuses are:<br><br><li>Complete</li><br><li>Unknown</li><br><li>Potential Discrepancy</li><br><li>Duplicate</li><br><li>Password Protected</li><br><li>Configuration Required</li><br><li>Unsupported Formats</li><br><li>Anomaly Detected</li><br><li>Awaiting Confirmation</li><br><li>Storage Only</li><br><br>A misspelled status will return an empty array.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_status": "Complete,Storage Only"
                          }
                      }
                  },
                  {
                      "name": "document_source",
                      "in": "body",
                      "description": "The method of document ingestion. These sources are:<br><br><li>Upload Engine</li><br><li>Email</li><br><li>Intralinks</li><br><li>API</li>",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_source": "Email,Upload Engine"
                          }
                      }
                  },
                  {
                      "name": "document_tag_id",
                      "in": "body",
                      "description": "The IDs of tags in Canoe. To retrieve these, use the <code>v1/documents/tags</code> <a href=\"#get-document-tags\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_tag_id": "tag_1,tag_2"
                          }
                      }
                  },
                  {
                      "name": "file_upload_time_start",
                      "in": "body",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>greater than or equal to</strong> the given file_upload_time_start. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "file_upload_time_start": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "file_upload_time_end",
                      "in": "body",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>less than or equal to</strong> the given file_upload_time_end. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "file_upload_time_end": "2019-03-31T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "is_locked",
                      "in": "body",
                      "description": "The is_locked status of the document in Canoe. Accepted values are either true or false. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "example": {
                              "is_locked": false
                          }
                      }
                  },
                  {
                      "name": "ready_for_extract",
                      "in": "body",
                      "description": "The extraction status of the document in Canoe. Accepted values are either true or false. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "ready_for_extract": false
                          }
                      }
                  },
                  {
                      "name": "approval_status",
                      "in": "body",
                      "description": "The approval status of the documents in Canoe. If searching for multiple statuses, they should be separated by commas. Valid statuses are:<br><br><li>Approved</li><br><li>Flagged</li><br><li>Ignored</li><br><li>Pending</li>",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "approval_status": "Approved"
                          }
                      }
                  },
                  {
                      "name": "approved_by",
                      "in": "body",
                      "description": "The User ID of the approver of the documents in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "approved_by": "user_1,user_2"
                          }
                      }
                  },
                  {
                      "name": "approval_date_start",
                      "in": "body",
                      "description": "All documents returned will have an approval date <strong>greater than or equal to</strong> the given approval_date_start. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "approval_date_start": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "approval_date_end",
                      "in": "body",
                      "description": "All documents returned will have an approval date <strong>less than or equal to</strong> the given approval_date_end. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "approval_date_end": "2019-03-31"
                          }
                      }
                  },
                  {
                      "name": "account_group",
                      "in": "body",
                      "description": "The Account Group the documents belong to.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "approved_by": "Geography: North America,Geography: Europe"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/documents/delete-documents\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"document_id\":\"document_1,document_2\",\"client_document_id\":\"custom_id_16,custom_id_17\",\"fund_id\":\"fund_1,fund_2\",\"account_id\":\"account_1,account_2\",\"investment_entity_id\":\"entity_1,entity_2\",\"document_type\":\"Account Statement,Capital Call Notice\",\"fund_sponsor\":\"fund_sponsor_1,fund_sponsor_2\",\"data_date_start\":\"2019-03-30\",\"data_date_end\":\"2019-07-31\",\"document_status\":\"Complete,Storage Only\",\"document_source\":\"Email,Upload Engine\",\"document_tag_id\":\"tag_1,tag_2\",\"file_upload_time_start\":\"2019-03-30T04:00:00Z\",\"file_upload_time_end\":\"2019-07-31T04:00:00Z\",\"is_locked\":false,\"ready_for_extract\":true,\"approval_status\":\"Approved\",\"approved_by\":\"user_1,user_2\",\"approval_date_start\":\"2019-03-30\",\"approval_date_end\":\"2019-07-31\",\"account_group\":\"Geography: North America,Geography: Europe\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/delete-documents\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n      let body = {\n          \"document_id\": \"document_1,document_2\",\n          \"client_document_id\": \"custom_id_16,custom_id_17\",\n          \"fund_id\": \"fund_1,fund_2\",\n          \"account_id\": \"account_1,account_2\",\n          \"investment_entity_id\": \"entity_1,entity_2\",\n          \"document_type\": \"Account Statement,Capital Call Notice\",\n          \"fund_sponsor\": \"fund_sponsor_1,fund_sponsor_2\",\n          \"data_date_start\": \"2019-03-30\",\n          \"data_date_end\": \"2019-07-31\",\n          \"document_status\": \"Complete,Storage Only\",\n          \"document_source\": \"Email,Upload Engine\",\n          \"document_tag_id\": \"tag_1,tag_2\",\n          \"file_upload_time_start\": \"2019-03-30T04:00:00Z\",\n          \"file_upload_time_end\": \"2019-07-31T04:00:00Z\",\n          \"is_locked\": false,\n          \"ready_for_extract\": true,\n          \"approval_status\": \"Approved\",\n          \"approved_by\": \"user_1,user_2\",\n          \"approval_date_start\": \"2019-03-30\",\n          \"approval_date_end\": \"2019-07-31\",\n          \"account_group\": \"Geography: North America,Geography: Europe\"\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n          'https://api.canoesoftware.com/v1/documents/delete-documents',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'document_id' => 'document_1,document_2',\n                  'client_document_id' => 'custom_id_16,custom_id_17',\n                  'fund_id' => 'fund_1,fund_2',\n                  'account_id' => 'account_1,account_2',\n                  'investment_entity_id' => 'entity_1,entity_2',\n                  'document_type' => 'Account Statement,Capital Call Notice',\n                  'fund_sponsor' => 'fund_sponsor_1,fund_sponsor_2',\n                  'data_date_start' => '2019-03-30',\n                  'data_date_end' => '2019-07-31',\n                  'document_status' => 'Complete,Storage Only',\n                  'document_source' => 'Email,Upload Engine',\n                  'document_tag_id' => 'tag_1,tag_2',\n                  'file_upload_time_start' => '2019-03-30T04:00:00Z',\n                  'file_upload_time_end' => '2019-07-31T04:00:00Z',\n                  'is_locked' => false,\n                  'ready_for_extract' => true,\n                  'approval_status' => 'Approved,Ignored,Flagged,Pending',\n                  'approved_by' => 'user_1,user_2',\n                  'approval_date_start' => '2019-03-30',\n                  'approval_date_end' => '2019-07-31',\n                  'account_group' => 'Geography: North America,Geography: Europe',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/delete-documents'\n      payload = {\n          \"document_id\": \"document_1,document_2\",\n          \"client_document_id\": \"custom_id_16,custom_id_17\",\n          \"fund_id\": \"fund_1,fund_2\",\n          \"account_id\": \"account_1,account_2\",\n          \"investment_entity_id\": \"entity_1,entity_2\",\n          \"document_type\": \"Account Statement,Capital Call Notice\",\n          \"fund_sponsor\": \"fund_sponsor_1,fund_sponsor_2\",\n          \"data_date_start\": \"2019-03-30\",\n          \"data_date_end\": \"2019-07-31\",\n          \"document_status\": \"Complete,Storage Only\",\n          \"document_source\": \"Email,Upload Engine\",\n          \"document_tag_id\": \"tag_1,tag_2\",\n          \"file_upload_time_start\": \"2019-03-30T04:00:00Z\",\n          \"file_upload_time_end\": \"2019-07-31T04:00:00Z\",\n          \"is_locked\": false,\n          \"ready_for_extract\": true,\n          \"approval_status\": \"Approved\",\n          \"approved_by\": \"user_1,user_2\",\n          \"approval_date_start\": \"2019-03-30\",\n          \"approval_date_end\": \"2019-07-31\",\n          \"account_group\": \"Geography: North America,Geography: Europe\"\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/delete-documents\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          document_id = \"document_1,document_2\",\n          client_document_id = \"custom_id_16,custom_id_17\",\n          fund_id = \"fund_1,fund_2\",\n          account_id = \"account_1,account_2\",\n          document_type = \"Account Statement,Capital Call Notice\",\n          fund_sponsor = \"fund_sponsor_1,fund_sponsor_2\",\n          data_date_start = \"2019-03-30\",\n          data_date_end = \"2019-07-31\",\n          document_status = \"Complete,Storage Only\",\n          document_source = \"Email,Upload Engine\",\n          document_tag_id = \"tag_1,tag_2\",\n          file_upload_time_start = \"2019-03-30T04:00:00Z\",\n          file_upload_time_end = \"2019-07-31T04:00:00Z\",\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "deleted": 1,
                                          "ids": [
                                              "deleted_document_id"
                                          ]
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get A Single Document": {
          "get": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/{id}\n\nDownload a specific document by the document's ID. A successful call to this endpoint will only contain the binary file, not the JSON data.\n",
              "operationId": "GetASingleDocument",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id document.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/documents/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/documents/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/1\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      foreach (var h in response.ContentHeaders) {\n          if (h.Name==\"Content-Disposition\") {\n              var disposition = h.Value.ToString();\n              var filename = disposition.Substring(disposition.IndexOf(\"filename=\") + \"filename=\".Length);\n              File.WriteAllBytes(filename, response.RawBytes);\n          }\n      }\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "403": {
                      "description": "No access to the document."
                  }
              }
          }
      },
      "Delete A Single Document": {
          "delete": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/{id}\n\nDelete a specific document by using the document's Canoe ID.\n",
              "operationId": "DeleteDocument",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the document to be deleted.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X DELETE \\\n          \"https://api.canoesoftware.com/v1/documents/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"DELETE\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->delete(\n          'https://api.canoesoftware.com/v1/documents/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('DELETE', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/1\", Method.Delete);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The Document was deleted."
                  },
                  "403": {
                      "description": "No access to the document."
                  }
              }
          }
      },
      "Set Document Metadata": {
          "put": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents/{id}/metadata\n\nSet document metadata.\n",
              "operationId": "SetDocumentMetadata",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the document to be updated.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "approval_status",
                      "in": "body",
                      "description": "The new approval status to be changed on the document.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "approval_status": "Approved"
                          }
                      }
                  },
                  {
                      "name": "comment",
                      "in": "body",
                      "description": "The comment on the document.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "comment": "Sample Comment."
                          }
                      }
                  },
                  {
                      "name": "tags",
                      "in": "body",
                      "description": "Tags to be applied to the document. Set `overwrite` to true to remove pre-existing tags.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "tags": {
                                  "names": [],
                                  "overwrite": false
                              }
                          }
                      }
                  },
                  {
                      "name": "tags.names",
                      "in": "body",
                      "description": "The array of tag names to apply to the document.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "tags": {
                                  "names": [],
                                  "overwrite": false
                              }
                          }
                      }
                  },
                  {
                      "name": "tags.overwrite",
                      "in": "body",
                      "description": "A boolean indicating whether pre-existing tags should be detached.",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "example": {
                              "tags": {
                                  "names": [],
                                  "overwrite": false
                              }
                          }
                      }
                  },
                  {
                      "name": "client_document_id",
                      "in": "body",
                      "description": "The custom document ID.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_document_id": "custom_document_id."
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X PUT \\\n          \"https://api.canoesoftware.com/v1/documents/3/metadata\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"approval_status\":\"Approved\",\"comment\":\"Sample Comment.\",\"tags\":{\"names\":[],\"overwrite\":false}}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents/3/metadata\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"approval_status\": \"Approved\",\n          \"comment\": \"Sample Comment.\",\n          \"tags\": {\n              \"names\": [],\n              \"overwrite\": false\n          }\n      }\n\n      fetch(url, {\n          method: \"PUT\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->put(\n          'https://api.canoesoftware.com/v1/documents/3/metadata',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'approval_status' => 'Approved,Ignored,Flagged,Pending',\n                  'comment' => 'Sample Comment.',\n                  'tags' => [\n                      'names' => [],\n                      'overwrite' => false,\n                  ],\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents/3/metadata'\n      payload = {\n          \"approval_status\": \"Approved\",\n          \"comment\": \"Sample Comment.\",\n          \"tags\": {\n              \"names\": [],\n              \"overwrite\": false\n          }\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('PUT', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents/3/metadata\", Method.Put);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {   \n          approval_status = \"Approved\",\n          comment = \"Sample Comment\",\n          tags = new { names = new [] { \"tag name 1\", \"tag name 2\" }, overwrite = false }\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DocumentMetaData"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "description": "This feature is not enabled for your account."
                  },
                  "403": {
                      "description": "Approval status cannot be set on this document."
                  },
                  "422": {
                      "description": "Invalid approval status specified."
                  }
              }
          }
      },
      "Download Documents": {
          "get": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents\n\nDownload documents in a ZIP file. Each fetch will download up to 100 documents. By default, this will fetch the first 100 documents in the Intelligent Document Center. A successful call to this endpoint will only contain the binary file and not the JSON data.\n\nTo retrieve additional information, you can inspect the response header data. There, you can find the total number of documents filtered by current query parameters.\n",
              "operationId": "DownloadDocuments",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all documents on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2022-09-19.</u> Example: 1",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each page. The maximum number of documents limit is 100. <u>This parameter is only valid if the X-API-VERSION header is set to 2022-09-19.</u> Example: 50",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields you need in the partial response. The value of the fields parameter MUST be a comma-separated (U+002C COMMA, \",\") list that refers to the name(s) of the fields to be returned.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fields": {
                              "value": "name,validated_data"
                          }
                      }
                  },
                  {
                      "name": "document_id",
                      "in": "query",
                      "description": "The IDs of the documents in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_id": {
                              "value": "document_1,document_2"
                          }
                      }
                  },
                  {
                      "name": "client_document_id",
                      "in": "query",
                      "description": "The custom document IDs.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "client_document_id": {
                              "value": "client_document_id"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "query",
                      "description": "The IDs of funds in Canoe. To retrieve these, use the <code>v1/funds</code> <a href=\"#operations-Funds-GetFunds\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fund_id": {
                              "value": "fund_1,fund_2"
                          }
                      }
                  },
                  {
                      "name": "account_id",
                      "in": "query",
                      "description": "The IDs of accounts in Canoe. To retrieve these, use the <code>v1/organizations?type=account</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "account_id": {
                              "value": "account_1,account_2"
                          }
                      }
                  },
                  {
                      "name": "investment_entity_id",
                      "in": "query",
                      "description": "The IDs of investment entities in Canoe. To retrieve these, use the <code>v1/organizations?type=entity</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "investment_entity_id": {
                              "value": "entity_1,entity_2"
                          }
                      }
                  },
                  {
                      "name": "document_type",
                      "in": "query",
                      "description": "The document types. To retrieve these, use the <code>v1/documents/types</code> <a href=\"#operations-Documents-GetDocumentsType\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_type": {
                              "value": "Account Statement,Capital Call Notice"
                          }
                      }
                  },
                  {
                      "name": "fund_sponsor",
                      "in": "query",
                      "description": "The Fund Sponsors. The entered Fund Sponsors must be an exact match, although all query parameters are case-insensitive.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fund_sponsor_multiple": {
                              "value": "fund_sponsor_1,fund_sponsor_2"
                          },
                          "fund_sponsor_single": {
                              "value": "fund_sponsor_1"
                          }
                      }
                  },
                  {
                      "name": "data_date_start",
                      "in": "query",
                      "description": "All documents returned will have data date <strong>greater than or equal to</strong> the given data_date_start. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "data_date_start": {
                              "value": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "data_date_end",
                      "in": "query",
                      "description": "All documents returned will have data date <strong>less than or equal to</strong> the given data_date_end. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "data_date_end": {
                              "value": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "document_status",
                      "in": "query",
                      "description": "This is the validation status determined by Canoe. For example, Complete means that Canoe has successfully categorized, recognized, extracted, and validated data from the document.<br><br>Our current statuses are:<br><br><li>Complete</li><br><li>Unknown</li><br><li>Potential Discrepancy</li><br><li>Duplicate</li><br><li>Password Protected</li><br><li>Configuration Required</li><br><li>Unsupported Formats</li><br><li>Anomaly Detected</li><br><li>Awaiting Confirmation</li><br><li>Storage Only</li><br><br>A misspelled status will return an empty array.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_status": {
                              "value": "Complete,Storage Only"
                          }
                      }
                  },
                  {
                      "name": "document_source",
                      "in": "query",
                      "description": "The method of document ingestion. These sources are:<br><br><li>Upload Engine</li><br><li>Email</li><br><li>Intralinks</li><br><li>API</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_source": {
                              "value": "Email,Upload Engine"
                          }
                      }
                  },
                  {
                      "name": "skip_downloaded",
                      "in": "query",
                      "description": "Setting to true excludes documents from the response that have previously been downloaded through the API for the document allocations that match the call's other request parameters. The default value is false.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "skip_downloaded": {
                              "value": false
                          }
                      }
                  },
                  {
                      "name": "document_tag_id",
                      "in": "query",
                      "description": "The IDs of tags in Canoe. To retrieve these, use the <code>v1/documents/tags</code> <a href=\"#get-document-tags\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "document_tag_id": {
                              "value": "tag_1,tag_2"
                          }
                      }
                  },
                  {
                      "name": "file_upload_time_start",
                      "in": "query",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>greater than or equal to</strong> the given file_upload_time_start. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_upload_time_start": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "file_upload_time_end",
                      "in": "query",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>less than or equal to</strong> the given file_upload_time_end. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_upload_time_end": {
                              "value": "2019-03-31T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "account_group",
                      "in": "query",
                      "description": "The Account Group the documents belong to.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "account_group": {
                              "value": "Geography: North America,Geography: Europe"
                          }
                      }
                  },
                  {
                      "name": "last_modified_time_start",
                      "in": "query",
                      "description": "All documents returned will have a last updated timestamp <strong>greater than or equal to</strong> the given last_modified_time_start. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents updated on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "last_modified_time_start": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "last_modified_time_end",
                      "in": "query",
                      "description": "All documents returned will have a last updated timestamp <strong>less than or equal to</strong> the given last_modified_time_end. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents updated on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "last_modified_time_end": {
                              "value": "2019-07-31T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "is_locked",
                      "in": "query",
                      "description": "The is_locked status of the document in Canoe. Accepted values are either true or false. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "is_locked": {
                              "value": false
                          }
                      }
                  },
                  {
                      "name": "file_name_type",
                      "in": "query",
                      "description": "The document name format to return for each document.  The available options are name, original_file_name and id.  The default value for this is name, which is your tenant's custom \"Document Name Format\" specified in the Intelligent Document Center.  original_file_name returns the name of the file as it appeared when loaded into Canoe.  id returns the document’s Canoe Document Identifier.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_name_type": {
                              "value": "original_file_name"
                          }
                      }
                  },
                  {
                      "name": "ready_for_extract",
                      "in": "query",
                      "description": "The extraction status of the document in Canoe. Accepted values are either true or false. The default is false.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "ready_for_extract": {
                              "value": false
                          }
                      }
                  },
                  {
                      "name": "approval_status",
                      "in": "query",
                      "description": "The approval status of the documents in Canoe. If searching for multiple statuses, they should be separated by commas. Valid statuses are:<br><br><li>Approved</li><br><li>Flagged</li><br><li>Ignored</li><br><li>Pending</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approval_status": {
                              "value": "Approved"
                          }
                      }
                  },
                  {
                      "name": "approved_by",
                      "in": "query",
                      "description": "The User ID of the approver of the documents in Canoe.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approved_by": {
                              "value": "user_1,user_2"
                          }
                      }
                  },
                  {
                      "name": "approval_date_start",
                      "in": "query",
                      "description": "All documents returned will have an approval date <strong>greater than or equal to</strong> the given approval_date_start. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approval_date_start": {
                              "value": "2019-03-30"
                          }
                      }
                  },
                  {
                      "name": "approval_date_end",
                      "in": "query",
                      "description": "All documents returned will have an approval date <strong>less than or equal to</strong> the given approval_date_end. This will be in EST (Eastern Standard Time).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approval_date_end": {
                              "value": "2019-03-31"
                          }
                      }
                  },
                  {
                      "name": "assignee",
                      "in": "query",
                      "description": "The User ID of the assignee for the document in Canoe. If searching for multiple assignees, they should be separated by commas. Example:- user_1,user_2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approved_by": {
                              "value": "user_1,user_2"
                          }
                      }
                  },
                  {
                      "name": "not_document_tag_id",
                      "in": "query",
                      "description": "The IDs of tags in Canoe. To retrieve these, use the <code>v1/documents/tags</code> <a href=\"#get-document-tags\">endpoint</a>. This will search for documents that have NOT been tagged with a specified tag.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "approved_by": {
                              "value": "tag_1,tag_2"
                          }
                      }
                  },
                  {
                      "name": "category",
                      "in": "query",
                      "description": "The category of the document. Our current categories are:<br><br><li>Capital Activity</li><br><li>Email</li><br><li>General Due Diligence</li><br><li>Investment Documents</li><br><li>Investment Reporting</li><br><li>Other</li><br><li>Other - General</li><br><li>Tax</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "category": {
                              "value": "Capital Activity, Email"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/documents?page=1&limit=50&document_id=document_1%2Cdocument_2&client_document_id=custom_id_16%2Ccustom_id_17&fund_id=fund_1%2Cfund_2&account_id=account_1%2Caccount_2&investment_entity_id=entity_1%2Centity_2&document_type=Account+Statement%2CCapital+Call+Notice&fund_sponsor=fund_sponsor_1%2Cfund_sponsor_2&data_date_start=2019-03-30&data_date_end=2019-07-31&document_status=Complete%2CStorage+Only&document_source=Email%2CUpload+Engine&document_tag_id=tag_1%2Ctag_2&file_upload_time_start=2019-03-30T04%3A00%3A00Z&file_upload_time_end=2019-07-31T04%3A00%3A00Z&last_modified_time_start=2019-03-30T04%3A00%3A00Z&last_modified_time_end=2019-07-31T04%3A00%3A00Z&is_locked=false&ready_for_extract=true&approval_status=Approved&approved_by=user_1%2Cuser_2&approval_date_start=2019-03-30&approval_date_end=2019-07-31&account_group=Geography%3A+North+America%2CGeography%3A+Europe&skip_downloaded=false&file_name_type=original_file_name&category=Capital%20Activity\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents\"\n      );\n\n      let params = {\n          \"page\": \"1\",\n          \"limit\": \"50\",\n          \"document_id\": \"document_1,document_2\",\n          \"client_document_id\": \"custom_id_16,custom_id_17\",\n          \"fund_id\": \"fund_1,fund_2\",\n          \"account_id\": \"account_1,account_2\",\n          \"investment_entity_id\": \"entity_1,entity_2\",\n          \"document_type\": \"Account Statement,Capital Call Notice\",\n          \"fund_sponsor\": \"fund_sponsor_1,fund_sponsor_2\",\n          \"data_date_start\": \"2019-03-30\",\n          \"data_date_end\": \"2019-07-31\",\n          \"document_status\": \"Complete,Storage Only\",\n          \"document_source\": \"Email,Upload Engine\",\n          \"document_tag_id\": \"tag_1,tag_2\",\n          \"file_upload_time_start\": \"2019-03-30T04:00:00Z\",\n          \"file_upload_time_end\": \"2019-07-31T04:00:00Z\",\n          \"last_modified_time_start\": \"2019-03-30T04:00:00Z\",\n          \"last_modified_time_end\": \"2019-07-31T04:00:00Z\",\n          \"is_locked\": \"false\",\n          \"ready_for_extract\": \"true\",\n          \"approval_status\": \"Approved\",\n          \"approved_by\": \"user_1,user_2\",\n          \"approval_date_start\": \"2019-03-30\",\n          \"approval_date_end\": \"2019-07-31\",\n          \"account_group\": \"Geography: North America,Geography: Europe\",\n          \"skip_downloaded\": \"false\",\n          \"file_name_type\": \"original_file_name\",\n          \"category\": \"Capital Activity\"\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/documents',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'page' => '1',\n                  'limit' => '50',\n                  'document_id' => 'document_1,document_2',\n                  'client_document_id' => 'custom_id_16,custom_id_17',\n                  'fund_id' => 'fund_1,fund_2',\n                  'account_id' => 'account_1,account_2',\n                  'investment_entity_id' => 'entity_1,entity_2',\n                  'document_type' => 'Account Statement,Capital Call Notice',\n                  'fund_sponsor' => 'fund_sponsor_1,fund_sponsor_2',\n                  'data_date_start' => '2019-03-30',\n                  'data_date_end' => '2019-07-31',\n                  'document_status' => 'Complete,Storage Only',\n                  'document_source' => 'Email,Upload Engine',\n                  'document_tag_id' => 'tag_1,tag_2',\n                  'file_upload_time_start' => '2019-03-30T04:00:00Z',\n                  'file_upload_time_end' => '2019-07-31T04:00:00Z',\n                  'last_modified_time_start' => '2019-03-30T04:00:00Z',\n                  'last_modified_time_end' => '2019-07-31T04:00:00Z',\n                  'is_locked' => 'false',\n                  'ready_for_extract' => 'true',\n                  'approval_status' => 'Approved',\n                  'approved_by' => 'user_1,user_2',\n                  'approval_date_start' => '2019-03-30',\n                  'approval_date_end' => '2019-07-31',\n                  'account_group' => 'Geography: North America,Geography: Europe',\n                  'skip_downloaded' => 'false',\n                  'file_name_type' => 'original_file_name',\n                  'category'=> 'Capital Activity'\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents'\n      params = {\n        'page': '1',\n        'limit': '50',\n        'document_id': 'document_1,document_2',\n        'client_document_id': 'custom_id_16,custom_id_17',\n        'fund_id': 'fund_1,fund_2',\n        'account_id': 'account_1,account_2',\n        'investment_entity_id': 'entity_1,entity_2',\n        'document_type': 'Account Statement,Capital Call Notice',\n        'fund_sponsor': 'fund_sponsor_1,fund_sponsor_2',\n        'data_date_start': '2019-03-30',\n        'data_date_end': '2019-07-31',\n        'document_status': 'Complete,Storage Only',\n        'document_source': 'Email,Upload Engine',\n        'document_tag_id': 'tag_1,tag_2',\n        'file_upload_time_start': '2019-03-30T04:00:00Z',\n        'file_upload_time_end': '2019-07-31T04:00:00Z',\n        'last_modified_time_start': '2019-03-30T04:00:00Z',\n        'last_modified_time_end': '2019-07-31T04:00:00Z',\n        'is_locked': 'false',\n        'ready_for_extract': 'true',\n        'approval_status': 'Approved',\n        'approved_by': 'user_1,user_2',\n        'approval_date_start': '2019-03-30',\n        'approval_date_end': '2019-07-31',\n        'account_group': 'Geography: North America,Geography: Europe',\n        'skip_downloaded': 'false',\n        'file_name_type': 'original_file_name',\n        'category'=> 'Capital Activity'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"limit\", \"50\");\n      request.AddQueryParameter(\"document_id\", \"document_1,document_2\");\n      request.AddQueryParameter(\"client_document_id\", \"custom_id_16,custom_id_17\");\n      request.AddQueryParameter(\"fund_id\", \"fund_1,fund_2\");\n      request.AddQueryParameter(\"account_id\", \"account_1,account_2\");\n      request.AddQueryParameter(\"investment_entity_id\", \"entity_1,entity_2\");\n      request.AddQueryParameter(\"document_type\", \"Account Statement,Capital Call Notice\");\n      request.AddQueryParameter(\"fund_sponsor\", \"fund_sponsor_1,fund_sponsor_2\");\n      request.AddQueryParameter(\"data_date_start\", \"2019-03-30\");\n      request.AddQueryParameter(\"data_date_end\", \"2019-07-31\");\n      request.AddQueryParameter(\"document_status\", \"Complete,Storage Only\");\n      request.AddQueryParameter(\"document_source\", \"Email,Upload Engine\");\n      request.AddQueryParameter(\"document_tag_id\", \"tag_1,tag_2\");\n      request.AddQueryParameter(\"file_upload_time_start\", \"2019-03-30T04:00:00Z\");\n      request.AddQueryParameter(\"file_upload_time_end\", \"2019-07-31T04:00:00Z\");\n      request.AddQueryParameter(\"last_modified_time_start\", \"2019-03-30T04:00:00Z\");\n      request.AddQueryParameter(\"last_modified_time_end\", \"2019-07-31T04:00:00Z\");\n      request.AddQueryParameter(\"is_locked\", \"false\");\n      request.AddQueryParameter(\"ready_for_extract\", \"true\");\n      request.AddQueryParameter(\"approval_status\", \"Approved\");\n      request.AddQueryParameter(\"approved_by\", \"user_1,user_2\");\n      request.AddQueryParameter(\"approval_date_start\", \"2019-03-30\");\n      request.AddQueryParameter(\"approval_date_end\", \"2019-07-31\");\n      request.AddQueryParameter(\"account_group\", \"Geography: North America,Geography: Europe\");\n      request.AddQueryParameter(\"skip_downloaded\", \"false\");\n      request.AddQueryParameter(\"file_name_type\", \"original_file_name\");\n      request.AddQueryParameter(\"category\", \"Capital Activity\");\n      var response = client.Execute(request);\n      foreach (var h in response.ContentHeaders) {\n          if (h.Name==\"Content-Disposition\") {\n              var disposition = h.Value.ToString();\n              var filename = disposition.Substring(disposition.IndexOf(\"filename=\") + \"filename=\".Length);\n              File.WriteAllBytes(filename, response.RawBytes);\n          }\n      }\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  }
              }
          }
      },
      "Upload A Single Document": {
          "post": {
              "tags": [
                  "Documents"
              ],
              "summary": null,
              "description": "/v1/documents\n\nUpload a Single Document\n",
              "operationId": "UploadDocuments",
              "parameters": [
                  {
                      "name": "file",
                      "in": "body",
                      "description": "The file you would like to upload to Canoe. This supports only one file per request. If you send multiple files through a single request, only first file will be taken. If you are including a non-PDF document, please make sure your tenant is enabled for these extensions before attempting upload.",
                      "required": true,
                      "schema": {
                          "type": "file",
                          "example": {
                              "file": "ab"
                          }
                      }
                  },
                  {
                      "name": "storage_only",
                      "in": "body",
                      "description": "Whether you want the uploaded file to be extracted. If it's set to true, it will not be extracted nor validated by Canoe. The default value for this is false.",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "example": {
                              "storage_only": true
                          }
                      }
                  },
                  {
                      "name": "term_id",
                      "in": "body",
                      "description": "The term's ID you would like to associate the document with. This is <strong>required</strong> if storage_only is set to true. To retrieve term IDs, use the <code>v1/funds</code> <a href=\"#operations-Funds-GetFunds\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "term_id": "term_1"
                          }
                      }
                  },
                  {
                      "name": "organization_id",
                      "in": "body",
                      "description": "This is the entity or account ID you would like to associate the document with. It's <strong>required</strong> if storage_only is set to true and the document type you specified is one of the client document types. It's not required if storage_only is set to true and the document type you specified is one of the general document types. To retrieve these, use the <code>v1/organizations</code> <a href=\"#operations-Organizations-Organizations\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "organization_id": "document_1,document_2"
                          }
                      }
                  },
                  {
                      "name": "document_type_id",
                      "in": "body",
                      "description": "The document type you would like to associate the document with. It's <strong>required</strong> if storage_only is set to true. To retrieve these IDs, use the <code>v1/documents/types</code> <a href=\"#operations-Documents-GetDocumentsType\"><u>endpoint</u></a>.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_type_id": "document_1,document_2"
                          }
                      }
                  },
                  {
                      "name": "client_document_id",
                      "in": "body",
                      "description": "The custom document ID you'd like to associate the document with. This must be a unique ID within your account; multiple documents cannot share the same ID.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "document_type_id": "123,124"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/documents\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"file\":\"ab\",\"storage_only\":true,\"term_id\":\"term_1\",\"organization_id\":\"organization_1\",\"document_type_id\":\"term_sheet_id\",\"client_document_id\":\"123\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/documents\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"file\": \"ab\",\n          \"storage_only\": true,\n          \"term_id\": \"term_1\",\n          \"organization_id\": \"organization_1\",\n          \"document_type_id\": \"term_sheet_id\",\n          \"client_document_id\": \"123\"\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n          'https://api.canoesoftware.com/v1/documents',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'file' => 'ab',\n                  'storage_only' => true,\n                  'term_id' => 'term_1',\n                  'organization_id' => 'organization_1',\n                  'document_type_id' => 'term_sheet_id',\n                  'client_document_id' => '123',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/documents'\n      payload = {\n          \"file\": \"ab\",\n          \"storage_only\": true,\n          \"term_id\": \"term_1\",\n          \"organization_id\": \"organization_1\",\n          \"document_type_id\": \"term_sheet_id\",\n          \"client_document_id\": \"123\"\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/documents\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"multipart/form-data\");\n      request.AddFile(\"file\",\"path_to_file\");\n      var body = new\n      {   \n          storage_only = \"1\",\n          term_id = \"term_id\",\n          organization_id = \"organization_1\",\n          term_sheet_id = \"term_sheet_id\"\n          client_document_id = \"123\",\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/UploadSingleDocument"
                                  }
                              }
                          }
                      }
                  },
                  "422": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "errors": {
                                              "file": [
                                                  "The file must be a file of type: pdf."
                                              ],
                                              "document_type_id": [
                                                  "The document_type_id field is required for storage only upload."
                                              ],
                                              "term_id": [
                                                  "The term_id field is required for storage only upload."
                                              ]
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get Funds": {
          "get": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds\n\nFetch all funds accessible by the current API user.\n\n<span name=\"doc-alert-info\">\nThis endpoint offers optional pagination. \nPagination supports the return of large results and is highly recommended for all use cases. \nUnpaginated calls will be depreciated in future versions of the Canoe API.\n<br><br>\nWhen using pagination, the response will contain headers defining the <code>total</code> number of results, \nas well as the <code>first</code>, <code>next</code>, <code>prev</code>, and <code>last</code> page responses for your result set. \nTo enable pagination pass a header parameter of X-API-VERSION with a value of 2022-02-24.\n</span>\n",
              "operationId": "GetFunds",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This is the page number. For example, if you specify \"2\" you will see all funds on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2022-02-24.</u>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5 multiple": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "perPage",
                      "in": "query",
                      "description": "The number of funds for each page. The default number of funds limit is 100. <u>This parameter is only valid if the X-API-VERSION header is set to 2022-02-24.</u>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "3 per page": {
                              "value": 3
                          },
                          "50 per page": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "query",
                      "description": "The name of the fund you wish to retrieve records for. This can either be the formal fund name or any of its associated aliases. To search based on a part of the fund name or alias, just append an \"*\" character anywhere within the name parameter.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "name": {
                              "value": "Sample Hedge Fund Detail 1"
                          }
                      }
                  },
                  {
                      "name": "custom_field",
                      "in": "query",
                      "description": "An indexed string of one or more custom field IDs, which relate to fund specific custom fields, and one or more custom field values for each. Specify the custom field ID and then the custom field value(s). When filtering on multiple values, separate them by commas.  Filter on additional custom fields by separating with an ampersand. Example:- /v1/funds?custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2&custom_field[867e4563-c2b5-e788-d050-4ce151dec635]=value1",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_field": {
                              "value": "custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "query",
                      "description": "Returns exact fund for a specific id. Multiple IDs are separated by a comma.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fund_id single": {
                              "value": "fund_id_1"
                          },
                          "fund_id multiple": {
                              "value": "fund_id_1,fund_id_2,fund_id_3"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/funds?name=Sample Hedge Fund Detail 1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds\"\n      );\n\n      let params = {\n          \"name\": \"Sample Hedge Fund Detail 1\"\n      }\n\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]))\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/funds',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'name' => 'Sample Hedge Fund Detail 1'\n              ] \n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      params = {\n        'name': 'Sample Hedge Fund Detail 1'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"name\", \"Sample Hedge Fund Detail 1\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetFunds"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Get A Single Fund": {
          "get": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds/{id}\n\nFetch a specific fund by the fund's ID.\n",
              "operationId": "GetSingleFunds",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the fund.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/funds/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/funds/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds/1\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SingleFund"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Create A Single Fund": {
          "post": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds\n\nCreate a new fund based on the input parameters.\n",
              "operationId": "CreateSingleFund",
              "parameters": [
                  {
                      "name": "type",
                      "in": "body",
                      "description": "The fund's investment type. It can be drawdown_fund, hedge_fund, direct_investment, real_estate, or special_situation.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "type": "hedge_fund"
                          }
                      }
                  },
                  {
                      "name": "status",
                      "in": "body",
                      "description": "Indicates whether or not a fund is active. The status can be active, pending, retired, or transitional.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "status": "retired"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the fund.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "name": "Sample fund 1"
                          }
                      }
                  },
                  {
                      "name": "sponsor",
                      "in": "body",
                      "description": "The sponsor of the fund.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "sponsor": "Sample sponsor 1"
                          }
                      }
                  },
                  {
                      "name": "start_date",
                      "in": "body",
                      "description": "Fund Inception Date. The date on which the fund began its operations. Its format is yyyy-mm-dd.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "start_date": "2021-01-01T00:00:00.000Z"
                          }
                      }
                  },
                  {
                      "name": "aliases",
                      "in": "body",
                      "description": "Aliases of the investment name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "aliases": "Sample alias 1, Sample alias 2"
                          }
                      }
                  },
                  {
                      "name": "legal_name",
                      "in": "body",
                      "description": "The legal name of the fund.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "legal_name": "Sample Fund V"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": "The array of objects that contain the id of an existing custom field and a new value",
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "custom_fields": [
                                  {
                                      "id": 1,
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.id",
                      "in": "body",
                      "description": "ID of the fund custom field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": 1
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n      \"https://api.canoesoftware.com/v1/funds\" \\\n      -H \"Authorization: Bearer {token}\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\" \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"type\":\"drawdown_fund.\",\"status\":\"active\",\"name\":\"Sample fund 1\",\"sponsor\":\"Sample sponsor 1\",\"start_date\":\"2021-01-01\",\"aliases\":\"Sample alias 1, Sample alias 2\",\"legal_name\":\"Sample Fund V\",\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}]}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"\n          https://api.canoesoftware.com/v1/funds\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"type\": \"drawdown_fund\",\n          \"status\": \"active\",\n          \"name\": \"Sample fund 1\",\n          \"sponsor\": \"Sample sponsor 1\",\n          \"start_date\": \"2021-01-01\",\n          \"aliases\": \"Sample alias 1, Sample alias 2\",\n          \"legal_name\": \"Sample Fund V\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/funds',\n        [\n            'headers' => [\n                'Authorization' => 'Bearer {token}',\n                'Accept' => 'application/json',\n                'X-Requested-With' => 'XMLHttpRequest',\n                'Content-Type' => 'application/json',\n            ],\n            'json' => [\n                'type' => 'drawdown_fund',\n                'status' => 'active',\n                'name' => 'Sample fund 1',\n                'sponsor' => 'Sample sponsor 1',\n                'start_date' => '2021-01-01',\n                'aliases' => 'Sample alias 1, Sample alias 2',\n                'legal_name' => 'Sample Fund V',\n                'custom_fields' => [\n                    [\n                        'id' => '1',\n                        'value' => '1000',\n                    ],\n                ],\n            ],\n        ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds'\n      payload = {\n          \"type\": \"drawdown_fund\",\n          \"status\": \"active\",\n          \"name\": \"Sample fund 1\",\n          \"sponsor\": \"Sample sponsor 1\",\n          \"start_date\": \"2021-01-01\",\n          \"aliases\": \"Sample alias 1, Sample alias 2\",\n          \"legal_name\": \"Sample Fund V\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader)\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {   \n          type = \"drawdown_fund\",\n          status = \"active\",\n          name = \"Sample fund 1\",\n          sponsor = \"Sample sponsor 1\"\n          start_date = \"2021-01-01\",\n          aliases = \"Sample Alias 1, Sample Alias 2\",\n          legal_name = \"Sample Fund V,Sample Capital LP\"\n      };\n      request.AddJsonBody(body);\n      request.AddParameter(\"custom_fields\", custom_fields);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SingleFund"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Failed to create the fund with a corresponding term."
                  },
                  "422": {
                      "description": "Failed to create the fund with a corresponding term."
                  }
              }
          }
      },
      "Update A Single Fund": {
          "put": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds/{id}\n\nUpdate an existing fund based on the input parameters.\n",
              "operationId": "UpdateSingleFund",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the fund",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "type",
                      "in": "body",
                      "description": "The fund's investment type. It can be drawdown_fund, hedge_fund, direct_investment, real_estate, or special_situation.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "type": "drawdown_fund, hedge_fund"
                          }
                      }
                  },
                  {
                      "name": "status",
                      "in": "body",
                      "description": "Indicates whether or not a fund is active. The status can be active, pending, retired, or transitional.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "status": "active, retired"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the fund.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "name": "Sample fund 1, Sample fund 2"
                          }
                      }
                  },
                  {
                      "name": "sponsor",
                      "in": "body",
                      "description": "The sponsor of the fund.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "sponsor": "Sample sponsor 1, Sample sponsor 2"
                          }
                      }
                  },
                  {
                      "name": "start_date",
                      "in": "body",
                      "description": "Fund Inception Date. The date on which the fund began its operations. Its format is yyyy-mm-dd.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "start_date": "2021-01-01, 2010-12-30"
                          }
                      }
                  },
                  {
                      "name": "aliases",
                      "in": "body",
                      "description": "Aliases of the investment name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "aliases": "Sample alias 1, Sample alias 2"
                          }
                      }
                  },
                  {
                      "name": "legal_name",
                      "in": "body",
                      "description": "The legal name of the fund.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "legal_name": "Sample Fund V, Sample Capital LP"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": "The array of objects that contain the id of an existing custom field and a new value",
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "custom_fields": [
                                  {
                                      "id": 1,
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.id",
                      "in": "body",
                      "description": "ID of the fund custom field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": 1
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X PUT \\\n          \"https://api.canoesoftware.com/v1/funds/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"type\":\"drawdown_fund.\",\"status\":\"active\",\"name\":\"Sample fund 1\",\"sponsor\":\"Sample sponsor 1\",\"start_date\":\"2021-01-01\",\"aliases\":\"Sample alias 1,Sample alias 2\",\"legal_name\":\"Sample Fund V,Sample Capital LP\",\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}]}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"type\": \"drawdown_fund.\",\n          \"status\": \"active\",\n          \"name\": \"Sample fund 1\",\n          \"sponsor\": \"Sample sponsor 1\",\n          \"start_date\": \"2021-01-01\",\n          \"aliases\": \"Sample alias 1,Sample alias 2\",\n          \"legal_name\": \"Sample Fund V,Sample Capital LP\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n\n      fetch(url, {\n          method: \"PUT\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->put(\n          'https://api.canoesoftware.com/v1/funds/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'type' => 'drawdown_fund.',\n                  'status' => 'active',\n                  'name' => 'Sample fund 1',\n                  'sponsor' => 'Sample sponsor 1',\n                  'start_date' => '2021-01-01',\n                  'aliases' => 'Sample alias 1,Sample alias 2',\n                  'legal_name' => 'Sample Fund V,Sample Capital LP',\n                  'custom_fields' => [\n                      [\n                          'id' => '1',\n                          'value' => '1000',\n                      ],\n                  ],\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds'\n      payload = {\n          \"type\": \"drawdown_fund, hedge_fund.\",\n          \"status\": \"active, retired\",\n          \"name\": \"Sample fund 1, Sample fund 2\",\n          \"sponsor\": \"Sample sponsor 1, Sample sponsor 2\",\n          \"start_date\": \"2021-01-01, 2010-12-30\",\n          \"aliases\": \"Sample alias 1, Sample alias 2\",\n          \"legal_name\": \"Sample Fund V, Sample Capital LP\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds/1\", Method.Put);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {   \n          type = \"drawdown_fund\",\n          status = \"active\",\n          name = \"Sample fund 1\",\n          sponsor = \"Sample sponsor 1\"\n          start_date = \"2021-01-01\",\n          aliases = \"Sample Alias 1, Sample Alias 2\",\n          legal_name = \"Sample Fund V,Sample Capital LP\"\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SingleFund"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Failed to create the fund with a corresponding term."
                  },
                  "422": {
                      "description": "Failed to create the fund with a corresponding term."
                  }
              }
          }
      },
      "Get A Single Fund's Document Data": {
          "get": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds/{id}/document-data\n\nFetch the extracted data and metadata of a single fund's documents.\n\nBy default, Canoe's server sends back the full representation of each document object after processing requests. For better performance, you can have the server send only the fields you specify.\n\n<span name=\"doc-alert-info\">\nThis endpoint offers optional pagination.\nPagination supports the return of large results and is highly recommended for all use cases.\nUnpaginated calls will be depreciated in future versions of the Canoe API.\n<br><br>\nWhen using pagination, the response will contain headers defining the <code>total</code> number of results,\nas well as the <code>first</code>, <code>next</code>, <code>prev</code>, and <code>last</code> page responses for your result set.\nTo enable pagination pass a header parameter of X-API-VERSION with a value of 2024-10-07.\n</span>\n",
              "operationId": "GetSingleFundsDocumentdata",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the fund.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all documents on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2024-10-07.</u> Example: 1",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each page. The maximum number of documents limit is 100. <u>This parameter is only valid if the X-API-VERSION header is set to 2024-10-07.</u> Example: 50",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields you need in the partial response. The value of the fields parameter MUST be a comma-separated (U+002C COMMA, \",\") list that refers to the name(s) of the fields to be returned.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fields": {
                              "value": 1
                          }
                      }
                  },
                  {
                      "name": "category",
                      "in": "query",
                      "description": "The category of the document. Our current categories are:<br><br><li>Capital Activity</li><br><li>Email</li><br><li>General Due Diligence</li><br><li>Investment Documents</li><br><li>Investment Reporting</li><br><li>Other</li><br><li>Other - General</li><br><li>Tax</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "category": {
                              "value": "Capital Activity, Email"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/funds/1/document-data?fields=name%2Cvalidated_data&category=Capital%20Activity\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds/1/document-data\"\n      );\n\n      let params = {\n          \"fields\": \"name,validated_data\",\n          \"category\": \"Capital Activity\"\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/funds/1/document-data',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'fields' => 'name,validated_data',\n                  'category'=> 'Capital Activity'\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds/1/document-data'\n      params = {\n        'fields': 'name,validated_data',\n        'category': 'Capital Activity'\n\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds/1/document-data\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"fields\", \"name,validated_data\");\n      request.AddQueryParameter(\"category\", \"Capital Activity\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/FundDocumentData"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Download A Single Fund's Documents": {
          "get": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds/{id}/documents\n\nDownload a specific Fund's documents in a ZIP file. Each fetch will download up to 100 documents. By default, this will fetch the first 100 documents in the Intelligent Document Center. A successful call to this endpoint will only contain the binary file and not the JSON data.\n",
              "operationId": "DownloadSingleFundsDocumentdata",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the fund.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "start_time",
                      "in": "query",
                      "description": "All documents downloaded will have an uploaded timestamp <strong>greater than or equal to</strong> the given start_time. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the <a target=\"_blank\" href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"><u>ISO 8601 format</u></a> for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "start_time": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number corresponds with the pagination in Canoe's Intelligent Document Center. There are up to 100 documents on each page. For example, if you specify \"2\" you will see all of a Fund's documents on page 2. By default, this is set to 1.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "page": {
                              "value": 1
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each download. The maximum number of documents as well as the default is 100.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "limit": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "file_name_type",
                      "in": "query",
                      "description": "The document attribute to use for the file name. Available options are name, original_file_name and id. The default value for this is name.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_name_type": {
                              "value": "original_file_name"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/funds/1/documents?start_time=2019-03-30T04%3A00%3A00Z&page=1&limit=50&file_name_type=original_file_name\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds/1/documents\"\n      );\n\n      let params = {\n          \"start_time\": \"2019-03-30T04:00:00Z\",\n          \"page\": \"1\",\n          \"limit\": \"50\",\n          \"file_name_type\": \"original_file_name\",\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/funds/1/documents',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'start_time' => '2019-03-30T04:00:00Z',\n                  'page' => '1',\n                  'limit' => '50',\n                  'file_name_type' => 'original_file_name',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds/1/documents'\n      params = {\n        'start_time': '2019-03-30T04:00:00Z',\n        'page': '1',\n        'limit': '50',\n        'file_name_type': 'original_file_name'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds/1/documents\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader)\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"start_time\", \"2019-03-30T04:00:00Z\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"limit\", \"50\");\n      request.AddQueryParameter(\"file_name_type\", \"original_file_name\");\n      var response = client.Execute(request);\n      foreach (var h in response.ContentHeaders) {\n          if (h.Name==\"Content-Disposition\") {\n              var disposition = h.Value.ToString();\n              var filename = disposition.Substring(disposition.IndexOf(\"filename=\") + \"filename=\".Length);\n              File.WriteAllBytes(filename, response.RawBytes);\n          }\n      }\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "403": {
                      "description": "No access to the fund documents."
                  }
              }
          }
      },
      "Get A Single Fund's Document IDs": {
          "get": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds/{id}/document-ids\n\nGet a specific fund's documents IDs for downloading the documents one by one.\n",
              "operationId": "GetSingleFundsDocumentId",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the fund.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "start_time",
                      "in": "query",
                      "description": "All document IDs returned will have an uploaded timestamp greater than or equal to the given start_time. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the ISO 8601 format for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "start_time": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/funds/1/document-ids?start_time=2019-03-30T04%3A00%3A00Z\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds/1/document-ids\"\n      );\n\n      let params = {\n          \"start_time\": \"2019-03-30T04:00:00Z\",\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/funds/1/document-ids',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'start_time' => '2019-03-30T04:00:00Z',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds/1/document-ids'\n      params = {\n        'start_time': '2019-03-30T04:00:00Z'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds/1/document-ids\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"start_time\", \"2019-03-30T04:00:00Z\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/FundDocumentId"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "No access to the fund documents."
                  }
              }
          }
      },
      "Delete Multiple Funds": {
          "delete": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds\n\nBulk delete up to 100 funds at once based on fund ids. WARNING: This will delete all funds associated with the ids passed in, as well as their related documents, allocations, and terms.\n",
              "operationId": "DeleteMultipleFunds",
              "parameters": [
                  {
                      "name": "fund_id",
                      "in": "body",
                      "description": "fund_id",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "fund_id": "id_1,id_2,id_3"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X DELETE \\\n          \"https://api.canoesoftware.com/v1/funds\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"fund_id\":\"id_1,id_2,id_3\",\"status\":\"active,pending\",\"type\":\"drawdown_fund,hedge_fund\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/funds\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"fund_id\": \"id_1,id_2,id_3\"\n      }\n\n      fetch(url, {\n          method: \"DELETE\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->delete(\n          'https://api.canoesoftware.com/v1/funds',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'fund_id' => 'id_1,id_2,id_3'\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds'\n      payload = {\n          \"fund_id\": \"id_1,id_2,id_3\"\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('DELETE', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds\", Method.Delete);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      request.AddParameter(\"fund_id\",\"id_1,id_2,id_3\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DeleteFunds"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Cannot delete more than 100 records at one time. Request includes 305 items."
                  }
              }
          }
      },
      "Delete A Single Fund": {
          "delete": {
              "tags": [
                  "Funds"
              ],
              "summary": null,
              "description": "/v1/funds/{id}\n\nDelete a single fund based on the fund's id. WARNING: This will delete the fund, as well as it's associated documents, allocations, and terms.\n",
              "operationId": "DeleteSingleFund",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the fund to be deleted.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X DELETE \\\n      \"https://api.canoesoftware.com/v1/funds/1\" \\\n      -H \"Authorization: Bearer {token}\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"\n          https://api.canoesoftware.com/v1/funds/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"DELETE\",\n          headers: headers,\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->delete(\n          'https://api.canoesoftware.com/v1/funds/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/funds/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('DELETE', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/funds/1\", Method.Delete);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DeleteFund"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Cannot delete more than 100 records at one time. Request includes 305 items."
                  }
              }
          }
      },
      "Get Organizations": {
          "get": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations\n\nGet your organizations user info\n\n<span name=\"doc-alert-info\">\nThis endpoint offers optional pagination. \nPagination supports the return of large results and is highly recommended for all use cases. \nUnpaginated calls will be depreciated in future versions of the Canoe API.\n<br><br>\nWhen using pagination, the response will contain headers defining the <code>total</code> number of results, \nas well as the <code>first</code>, <code>next</code>, <code>prev</code>, and <code>last</code> page responses for your result set. \nTo enable pagination pass a header parameter of X-API-VERSION with a value of 2023-08-07.\n</span>\n",
              "operationId": "Organizations",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all organizations on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2023-08-07.</u>",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "examples": {
                              "page 1": {
                                  "value": 1
                              },
                              "page 5 multiple": {
                                  "value": 5
                              }
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of Organizations for each paginated download. The default is 100.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "3 per page": {
                              "value": 3
                          },
                          "50 per page": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "organization_id",
                      "in": "query",
                      "description": "This is the entity or account ID you would like to search for. When filtering on multiple values, separate them by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "organization_id": "organization_1,organization_2"
                          }
                      }
                  },
                  {
                      "name": "entity_custom_field",
                      "in": "query",
                      "description": "An indexed string of one or more custom field IDs, which relate to entity specific custom fields, and one or more custom field values for each. Specify the custom field ID and then the custom field value(s).  When filtering on multiple values, separate them by commas.  Filter on additional custom fields by separating with an ampersand. Example:- /v1/organizations?entity_custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2&entity_custom_field[867e4563-c2b5-e788-d050-4ce151dec635]=value1",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "entity_custom_field": {
                              "value": "entity_custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2"
                          }
                      }
                  },
                  {
                      "name": "type",
                      "in": "query",
                      "description": "The type of organizations to return. Available types are 'account' and 'entity'. Defaults to both types.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "account": {
                              "value": "account"
                          },
                          "entity": {
                              "value": "entity"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "query",
                      "description": "The names of the accounts or entities you wish to retrieve records for. When filtering for entities this can either be the formal entity name or any of its associated aliases. To search based on a part of an account name or part of an entity name or alias, just append an \"*\" character anywhere within the name parameter.",
                      "schema": null,
                      "type": "string",
                      "examples": {
                          "single name": {
                              "value": "Sample Organization 1"
                          },
                          "partial name": {
                              "value": "Sample Org*"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/organizations?type=account\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations\"\n      );\n\n      let params = {\n          \"type\": \"account\",\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/organizations',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'type' => 'account',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations'\n      params = {\n        'type': 'account'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"type\", \"account\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetOrganization"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Get A Single Organization": {
          "get": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/{id}\n\nFetch organization by the organization's ID\n",
              "operationId": "FindById",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the organization.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/organizations/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/organizations/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/1\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetOrganization"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Get A Single Organization's Document Data": {
          "get": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/{id}/document-data\n\nFetch the extracted data and metadata of a single organization's documents.\n\n<span name=\"doc-alert-info\">\nThis endpoint offers optional pagination.\nPagination supports the return of large results and is highly recommended for all use cases.\nUnpaginated calls will be depreciated in future versions of the Canoe API.\n<br><br>\nWhen using pagination, the response will contain headers defining the <code>total</code> number of results,\nas well as the <code>first</code>, <code>next</code>, <code>prev</code>, and <code>last</code> page responses for your result set.\nTo enable pagination pass a header parameter of X-API-VERSION with a value of 2024-10-07.\n</span>\n",
              "operationId": "FindBySingleOrganizationId",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the organization.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all documents on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2024-10-07.</u> Example: 1",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each page. The maximum number of documents limit is 100. <u>This parameter is only valid if the X-API-VERSION header is set to 2024-10-07.</u> Example: 50",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields you need in the partial response. The value of the fields parameter MUST be a comma-separated (U+002C COMMA, \",\") list that refers to the name(s) of the fields to be returned.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fields": {
                              "value": "name,validated_data"
                          }
                      }
                  },
                  {
                      "name": "category",
                      "in": "query",
                      "description": "The category of the document. Our current categories are:<br><br><li>Capital Activity</li><br><li>Email</li><br><li>General Due Diligence</li><br><li>Investment Documents</li><br><li>Investment Reporting</li><br><li>Other</li><br><li>Other - General</li><br><li>Tax</li>",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "category": {
                              "value": "Capital Activity, Email"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/organizations/1/document-data?fields=name%2Cvalidated_data&category=Capital%20Activity\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/1/document-data\"\n      );\n\n      let params = {\n          \"fields\": \"name,validated_data\",\n          \"category\": \"Capital Activity\"\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/organizations/1/document-data',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'fields' => 'name,validated_data',\n                  'category'=> 'Capital Activity'\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/1/document-data'\n      params = {\n        'fields': 'name,validated_data',\n        'category': 'Capital Activity'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/1/document-data\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"fields\", \"name,validated_data\");\n      request.AddQueryParameter(\"category\", \"Capital Activity\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetSingleOrganizationData"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Download A Single Organization's Documents": {
          "get": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/{id}/documents\n\nDownload a specific Organization's documents in a ZIP file. Each fetch will download up to 100 documents. By default, this will fetch the first 100 documents in the Intelligent Document Center. A successful call to this endpoint will only contain the binary file and not the JSON data.\n",
              "operationId": "DownloadOrganizationDocuments",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the organization.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "start_time",
                      "in": "query",
                      "description": "All documents downloaded will have an uploaded timestamp greater than or equal to the given start_time. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the ISO 8601 format for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "start_time": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number corresponds with the pagination in Canoe's Intelligent Document Center. There are up to 100 documents on each page. For example, if you specify \"2\" you will see all of an Organization's documents on page 2. By default, this is set to 1.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "page": {
                              "value": "1"
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each download. The maximum number of documents as well as the default is 100.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "limit": {
                              "value": "50"
                          }
                      }
                  },
                  {
                      "name": "file_name_type",
                      "in": "query",
                      "description": "The document attribute to use for the file name. Available options are name, original_file_name and id. The default value for this is name.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "file_name_type": {
                              "value": "original_file_name"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/organizations/1/documents?start_time=2019-03-30T04%3A00%3A00Z&page=1&limit=50&file_name_type=original_file_name\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/1/documents\"\n      );\n\n      let params = {\n          \"start_time\": \"2019-03-30T04:00:00Z\",\n          \"page\": \"1\",\n          \"limit\": \"50\",\n          \"file_name_type\": \"original_file_name\"\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/organizations/1/documents',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'start_time' => '2019-03-30T04:00:00Z',\n                  'page' => '1',\n                  'limit' => '50',\n                  'file_name_type' => 'original_file_name'\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/1/documents'\n      params = {\n        'start_time': '2019-03-30T04:00:00Z',\n        'page': '1',\n        'limit': '50',\n        'file_name_type': 'original_file_name'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/1/documents\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"start_time\", \"2019-03-30T04:00:00Z\");\n      request.AddQueryParameter(\"page\", \"1\");\n      request.AddQueryParameter(\"limit\", \"50\");\n      request.AddQueryParameter(\"file_name_type\", \"original_file_name\");\n      var response = client.Execute(request);\n      foreach (var h in response.ContentHeaders) {\n          if (h.Name==\"Content-Disposition\") {\n              var disposition = h.Value.ToString();\n              var filename = disposition.Substring(disposition.IndexOf(\"filename=\") + \"filename=\".Length);\n              File.WriteAllBytes(filename, response.RawBytes);\n          }\n      }\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success"
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Get A Single Organization's Document IDs": {
          "get": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/{id}/document-ids\n\nGet a specific organization's document IDs for downloading the documents one by one.\n",
              "operationId": "DownloadBySingleOrganizationId",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the organization.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "start_time",
                      "in": "query",
                      "description": "All document IDs returned will have an uploaded timestamp greater than or equal to the given start_time. Unless otherwise specified, the timestamp will be in EST (Eastern Standard Time). We suggest using the ISO 8601 format for the parameter. For example, '2019-09-18T00:00:00-07:00' represents the time in Pacific Daylight Time; this will be automatically converted to EST. In this case, the user will receive the documents uploaded on or after 2019-09-19 at 03:00:00.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "start_time": {
                              "value": "2019-03-30T04:00:00Z"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/organizations/1/document-ids?start_time=2019-03-30T04%3A00%3A00Z\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/1/document-ids\"\n      );\n\n      let params = {\n          \"start_time\": \"2019-03-30T04:00:00Z\",\n      };\n      Object.keys(params)\n          .forEach(key => url.searchParams.append(key, params[key]));\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/organizations/1/document-ids',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n              'query' => [\n                  'start_time' => '2019-03-30T04:00:00Z',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/1/document-ids'\n      params = {\n        'start_time': '2019-03-30T04:00:00Z'\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers, params=params)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/1/document-ids\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddQueryParameter(\"start_time\", \"2019-03-30T04:00:00Z\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetSingleOrganizationId"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Create A Single Entity": {
          "post": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/entities\n\nCreate a new entity based on the input parameters.\n",
              "operationId": "CreateASingleEntity",
              "parameters": [
                  {
                      "name": "parent_account",
                      "in": "body",
                      "description": "The ID of the entity's parent account.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "parent_account": {
                              "value": "account_1"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the entity.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "name": {
                              "value": "Sample entity 1"
                          }
                      }
                  },
                  {
                      "name": "aliases",
                      "in": "body",
                      "description": "Aliases of the entity name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "aliases": {
                              "value": "Sample alias 1"
                          }
                      }
                  },
                  {
                      "name": "downstream_ids",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "downstream_ids.ids",
                      "in": "body",
                      "description": "ID of the entity downstream system identifier. Possible options are addepar_owner_id, addepar_cash_owner_id, tamarac_account_number.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "aliases.ids": {
                              "value": "addepar_owner_id"
                          }
                      }
                  },
                  {
                      "name": "downstream_ids.value",
                      "in": "body",
                      "description": "The value for the specified downstream system identifier.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "aliases.value": {
                              "value": "sample_name"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "custom_fields.id",
                      "in": "body",
                      "description": "ID of the entity custom field. This can be retrieved by using the Get Organizations endpoint.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.id": {
                              "value": "1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.value": {
                              "value": "1000"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/organizations/entities\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"parent_account\":\"account_1\",\"name\":\"Sample entity 1\",\"aliases\":\"Sample alias 1\",\"downstream_ids\":[{\"id\":\"addepar_owner_id\",\"value\":\"sample_name\"}],\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}]}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/entities\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample entity 1\",\n          \"aliases\": \"Sample alias 1\",\n          \"downstream_ids\": [\n              {\n                  \"id\": \"addepar_owner_id\",\n                  \"value\": \"sample_name\"\n              }\n          ],\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n          'https://api.canoesoftware.com/v1/organizations/entities',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'parent_account' => 'account_1',\n                  'name' => 'Sample entity 1',\n                  'aliases' => 'Sample alias 1',\n                  'downstream_ids' => [\n                      [\n                          'id' => 'addepar_owner_id',\n                          'value' => 'sample_name',\n                      ],\n                  ],\n                  'custom_fields' => [\n                      [\n                          'id' => '1',\n                          'value' => '1000',\n                      ],\n                  ],\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/entities'\n      payload = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample entity 1\",\n          \"aliases\": \"Sample alias 1\",\n          \"downstream_ids\": [\n              {\n                  \"id\": \"addepar_owner_id\",\n                  \"value\": \"sample_name\"\n              }\n          ],\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/entities\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader)\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          parent_account = \"account_1\",\n          name = \"Sample account 1\",\n          aliases = \"Sample alias 1\",\n          downstream_ids = new[]\n          {\n              new { id = addepar_owner_id, value = sample_name }\n          },\n          custom_fields = new[]\n          {\n              new { id = 1, value = 100 }\n          }\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SingleEntity"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Update A Single Entity": {
          "put": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/entities/{id}\n\nUpdate an existing entity based on the input parameters.\n",
              "operationId": "UpdateASingleEntity",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the entity.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "parent_account",
                      "in": "body",
                      "description": "The ID of the entity's parent account.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "parent_account": {
                              "value": "account_1"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the entity.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "name": {
                              "value": "Sample entity 1"
                          }
                      }
                  },
                  {
                      "name": "aliases",
                      "in": "body",
                      "description": "Aliases of the entity name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "required": true,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "aliases": {
                              "value": "Sample alias 1"
                          }
                      }
                  },
                  {
                      "name": "downstream_ids",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "downstream_ids.ids",
                      "in": "body",
                      "description": "ID of the entity downstream system identifier. Possible options are addepar_owner_id, addepar_cash_owner_id, tamarac_account_number.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "aliases.ids": {
                              "value": "addepar_owner_id"
                          }
                      }
                  },
                  {
                      "name": "downstream_ids.value",
                      "in": "body",
                      "description": "The value for the specified downstream system identifier.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "aliases.value": {
                              "value": "sample_name"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "custom_fields.id",
                      "in": "body",
                      "description": "ID of the entity custom field. This can be retrieved by using the Get Organizations endpoint.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.id": {
                              "value": "1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.value": {
                              "value": "1000"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X PUT \\\n          \"https://api.canoesoftware.com/v1/organizations/entities/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"parent_account\":\"account_1\",\"name\":\"Sample entity 1\",\"aliases\":\"Sample alias 1\",\"downstream_ids\":[{\"id\":\"addepar_owner_id\",\"value\":\"sample_name\"}],\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}]}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/entities/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample entity 1\",\n          \"aliases\": \"Sample alias 1\",\n          \"downstream_ids\": [\n              {\n                  \"id\": \"addepar_owner_id\",\n                  \"value\": \"sample_name\"\n              }\n          ],\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n\n      fetch(url, {\n          method: \"PUT\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->put(\n          'https://api.canoesoftware.com/v1/organizations/entities/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'parent_account' => 'account_1',\n                  'name' => 'Sample entity 1',\n                  'aliases' => 'Sample alias 1',\n                  'downstream_ids' => [\n                      [\n                          'id' => 'addepar_owner_id',\n                          'value' => 'sample_name',\n                      ],\n                  ],\n                  'custom_fields' => [\n                      [\n                          'id' => '1',\n                          'value' => '1000',\n                      ],\n                  ],\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/entities/1'\n      payload = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample entity 1\",\n          \"aliases\": \"Sample alias 1\",\n          \"downstream_ids\": [\n              {\n                  \"id\": \"addepar_owner_id\",\n                  \"value\": \"sample_name\"\n              }\n          ],\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('PUT', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/entities/1\", Method.Put);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          parent_account = \"account_1\",\n          name = \"Sample account 1\",\n          aliases = \"Sample alias 1\",\n          downstream_ids = new[]\n          {\n              new { id = addepar_owner_id, value = sample_name }\n          },\n          custom_fields = new[]\n          {\n              new { id = 1, value = 100 }\n          }\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "id": "1",
                                          "parent_id": "00",
                                          "name": "Demo",
                                          "aliases": [],
                                          "created_at": "2017-06-18 23:42:52",
                                          "updated_at": "2019-04-09 10:18:05",
                                          "downstream_ids": [
                                              {
                                                  "id": "addepar_owner_id",
                                                  "name": "Addepar",
                                                  "type": "Owner ID",
                                                  "value": "sample_name"
                                              }
                                          ],
                                          "custom_fields": [
                                              {
                                                  "name": "CLIENT_ID",
                                                  "value": "BOX1",
                                                  "custom_field_id": "1"
                                              }
                                          ]
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  },
                  "404": {
                      "description": "Resource Not Found"
                  },
                  "422": {
                      "description": "Unprocessable Entity"
                  }
              }
          }
      },
      "Create A Single Account": {
          "post": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/accounts\n\nCreate a new account based on the input parameters.\n",
              "operationId": "CreateASingleAccount",
              "parameters": [
                  {
                      "name": "parent_account",
                      "in": "body",
                      "description": "The ID of the accounts's parent account.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "parent_account": {
                              "value": "account_1"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the account.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "name": {
                              "value": "Sample Account 1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "custom_fields.id",
                      "in": "body",
                      "description": "ID of the account custom field. This can be retrieved by using the Get Organizations endpoint.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.id": {
                              "value": "1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.value": {
                              "value": "1000"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/organizations/accounts\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"parent_account\":\"account_1\",\"name\":\"Sample account 1\",\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}]}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/accounts\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample account 1\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n          'https://api.canoesoftware.com/v1/organizations/accounts',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'parent_account' => 'account_1',\n                  'name' => 'Sample account 1',\n                  'custom_fields' => [\n                      [\n                          'id' => '1',\n                          'value' => '1000',\n                      ],\n                  ],\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/accounts'\n      payload = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample account 1\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/accounts\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          parent_account = \"account_1\",\n          name = \"Sample account 1\",\n          custom_fields = new[]\n          {\n              new { id = 1, value = 100 }\n          }\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "id": "1",
                                          "parent_id": "00",
                                          "name": "Demo",
                                          "aliases": [],
                                          "created_at": "2017-06-18 23:42:52",
                                          "updated_at": "2019-04-09 10:18:05",
                                          "custom_fields": [
                                              {
                                                  "name": "CLIENT_ID",
                                                  "value": "BOX1",
                                                  "custom_field_id": "1"
                                              }
                                          ]
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Failed to create the account."
                  }
              }
          }
      },
      "Update A Single Account": {
          "put": {
              "tags": [
                  "Organizations"
              ],
              "summary": null,
              "description": "/v1/organizations/accounts/{id}\n\nUpdate an existing account based on the input parameters.\n",
              "operationId": "UpdateASingleAccount",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the account.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "parent_account",
                      "in": "body",
                      "description": "The ID of the entity's parent account.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "parent_account": {
                              "value": "account_1"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the entity.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "name": {
                              "value": "Sample entity 1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": null,
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "custom_fields.id",
                      "in": "body",
                      "description": "ID of the entity custom field. This can be retrieved by using the Get Organizations endpoint.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.id": {
                              "value": "1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_fields.value": {
                              "value": "1000"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X PUT \\\n          \"https://api.canoesoftware.com/v1/organizations/accounts/1\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"parent_account\":\"account_1\",\"name\":\"Sample account 1\",\"custom_fields\":[{\"id\":\"1\",\"value\":\"1000\"}]}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/organizations/accounts/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample account 1\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n\n      fetch(url, {\n          method: \"PUT\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->put(\n          'https://api.canoesoftware.com/v1/organizations/accounts/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'parent_account' => 'account_1',\n                  'name' => 'Sample account 1',\n                  'custom_fields' => [\n                      [\n                          'id' => '1',\n                          'value' => '1000',\n                      ],\n                  ],\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/organizations/accounts/1'\n      payload = {\n          \"parent_account\": \"account_1\",\n          \"name\": \"Sample account 1\",\n          \"custom_fields\": [\n              {\n                  \"id\": \"1\",\n                  \"value\": \"1000\"\n              }\n          ]\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('PUT', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/organizations/accounts/1\", Method.Put);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          parent_account = \"account_1\",\n          name = \"Sample account 1\",\n          custom_fields = new[]\n          {\n              new { id = 1, value = 100 }\n          }\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "id": "1",
                                          "parent_id": "00",
                                          "name": "Demo",
                                          "aliases": [],
                                          "created_at": "2017-06-18 23:42:52",
                                          "updated_at": "2019-04-09 10:18:05",
                                          "custom_fields": [
                                              {
                                                  "name": "CLIENT_ID",
                                                  "value": "BOX1",
                                                  "custom_field_id": "1"
                                              }
                                          ]
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Failed to update the account."
                  }
              }
          }
      },
      "Get Your API User Information": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": null,
              "description": "/v1/user\n\nFetch information about your Canoe API user.\n",
              "operationId": "User",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/user\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/user\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/user',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/user'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/user\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/User"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get Users Within Your Organization": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": null,
              "description": "/v1/users\n\nFetch information about users within your Canoe organization.\n\n<span name=\"doc-alert-info\">\nThis endpoint offers optional pagination. \nPagination supports the return of large results and is highly recommended for all use cases. \nUnpaginated calls will be depreciated in future versions of the Canoe API.\n<br><br>\nWhen using pagination, the response will contain headers defining the <code>total</code> number of results, \nas well as the <code>first</code>, <code>next</code>, <code>prev</code>, and <code>last</code> page responses for your result set. \nTo enable pagination pass a header parameter of X-API-VERSION with a value of 2024-12-12.\n</span>\n",
              "operationId": "findByTags",
              "parameters": [
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page number. For example, if you specify \"2\" you will see all users on page 2. By default, this is set to 1. <u>This parameter is only valid if the X-API-VERSION header is set to 2024-12-12.</u> Example: 1",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "The number of documents for each page. The maximum number of users limit is 100. <u>This parameter is only valid if the X-API-VERSION header is set to 2024-12-12.</u> Example: 50",
                      "required": false,
                      "schema": {
                          "type": "integer"
                      },
                      "examples": {
                          "limit": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "user_id",
                      "in": "query",
                      "description": "The IDs of the users in Canoe. Example: user_1,user_2",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "user 1": {
                              "value": "user_1"
                          },
                          "user 2": {
                              "value": "user_2"
                          }
                      }
                  },
                  {
                      "name": "email_id",
                      "in": "query",
                      "description": "The emails of the users in Canoe. Example: user_1@example.com,user_2@example.com",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "user 1 email address": {
                              "value": "user_1@example.com"
                          },
                          "user 2 email address": {
                              "value": "user_2@example.com"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          -G \"https://api.canoesoftware.com/v1/users?user_id=user_1%2Cuser_2&email=user_1%40example.com%2Cuser_2%40example.com\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/user\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/user',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/user'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/user\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Users"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get an access token": {
          "post": {
              "tags": [
                  "Password Grant Tokens"
              ],
              "summary": null,
              "description": "/v1/tokens\n\nAccess tokens provide access to all other endpoints within the API. This endpoint allows you to request access tokens securely without going through the OAuth2 authorization code redirect flow.\n",
              "operationId": "Tokens",
              "parameters": [
                  {
                      "name": "username",
                      "in": "body",
                      "description": "Your username. This will be the email address associated with your account.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "username": "abc@xyz.com"
                          }
                      }
                  },
                  {
                      "name": "password",
                      "in": "body",
                      "description": "Your password.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "password": "ab**9Pe+_.^3a!@~yql"
                          }
                      }
                  },
                  {
                      "name": "organization_id",
                      "in": "body",
                      "description": "The organization you would like to be authenticated under (this is required if your user has access to multiple organizations).",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "organization_id": "account_1"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \\\n          \"https://api.canoesoftware.com/v1/tokens\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"username\":\"abc@xyz.com\",\"password\":\"ab**9Pe+_.^3a!@~yql\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/tokens\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"username\": \"abc@xyz.com\",\n          \"password\": \"ab**9Pe+_.^3a!@~yql\"\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\n          'https://api.canoesoftware.com/v1/tokens',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n                  'Content-Type' => 'application/json',\n              ],\n              'json' => [\n                  'username' => 'abc@xyz.com',\n                  'password' => 'ab**9Pe+_.^3a!@~yql',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/tokens'\n      payload = {\n          \"username\": \"abc@xyz.com\",\n          \"password\": \"ab**9Pe+_.^3a!@~yql\"\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/tokens\", Method.Post);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          username = \"abc@xyz.com\",\n          password = \"ab**9Pe+_.^3a!@~yql\"\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Token"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Managing OAuth Clients": {
          "get": {
              "tags": [
                  "Authentication"
              ],
              "summary": null,
              "description": "<p>To verify incoming API requests, Canoe's APIs use access tokens.</p>\n<p>Canoe API users may <a href=\"#managing-oauth-clients\">create and manage their OAuth Client</a>, and use the <code>Client ID</code> and <code>Client Secret</code> to request an authorization code and access token.</p>\n<p>Canoe API users can also use the <code class=\"prettyprint\">/v1/tokens</code> <a href=\"#password-grant-tokens\">endpoint</a> to manage the access tokens. To authenticate to the <code class=\"prettyprint\">/v1/tokens</code> endpoint, you will need API user credentials. This is one of the few API endpoints where you will need to use your user credentials; most other endpoints are authenticated through access tokens.</p>\n<aside class=\"notice\">\n    Note: An access token issued from Canoe will expire in 24 hours.\n</aside>\n<p>Once you have an access token, you can authenticate to Canoe's API endpoints. Pass the access token in the request header in the format <code class=\"prettyprint\">Authorization: Bearer {token}</code>, where <code class=\"prettyprint\">{token}</code> is your newly created personal access token.</p>\n<p>For example, if your newly created access token is \"eyJ0eXAiOiJKV1QiLCJhbG\", your header should look like \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbG\"</p>\n<p>If you are using Postman Collection for testing purpose, you could follow the steps here: <a href=\"https://learning.getpostman.com/docs/postman/sending_api_requests/authorization/#bearer-token\" target=\"_blank\"><u>Authorization - Bearer Token</u></a></p>\n<aside class=\"notice\">\n    Note: Sometimes, you want to give API access only to some specific IP addresses. Please contact us to enable that.\n</aside>\n\n<p>Developers building applications that need to interact with Canoe's API need to first register their application by creating a Client account. Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization. When a Client is created, it will be issued a <code>Client ID</code> and <code>Client Secret</code>. These values will be used when requesting access tokens from your application. </p>\n\n<p>Canoe API users can create and manage their OAuth Clients through the <a href=https://client.canoesoftware.com/api_configuration target=\"_blank\"><u>API Configuration Dashboard</u></a>.</p>\n",
              "operationId": "ManageAuthClient"
          }
      },
      "Requesting Tokens - Authorization Code": {
          "post": {
              "tags": [
                  "Authentication"
              ],
              "summary": null,
              "description": "/oauth/token\n\n<p>Once a client has been created, you may use the <code>Client ID</code> and <code>Client Secret</code> to request an\nauthorization code and access token from your application. First, your application should make a redirect request to\nCanoe's <code>oauth/authorize</code> route (see examples on the right panel)</p>\n\n<p>When receiving authorization requests, Canoe will ask users to approve or deny the authorization request. If users approve the request, they will be redirected back to the <code>redirect_uri</code> that was specified by the application that requested access (your application). The <code>redirect_uri</code> must match the <code>redirect</code> URL that was specified when the client was created.</p>\n<p>If the user approves the authorization request, they will be redirected back to the consuming application with the authorization code. The consumer should then issue a <code>POST</code> request to Canoe to request an access token. The request should include the authorization code that was issued by Canoe when the user approved the authorization request. See examples on the right panel and the parameters for the <code>POST</code> request below.</p>\n",
              "operationId": "RequestingTokensAuthCodes",
              "parameters": [
                  {
                      "name": "grant_type",
                      "in": "body",
                      "description": "The grant_type parameter must be set to \"authorization_code\".",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "grant_type": "authorization_code"
                          }
                      }
                  },
                  {
                      "name": "client_id",
                      "in": "body",
                      "description": "Your Application's Client ID.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_id": "client-id"
                          }
                      }
                  },
                  {
                      "name": "client_secret",
                      "in": "body",
                      "description": "Your Application's Client Secret.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_secret": "your_client_secret"
                          }
                      }
                  },
                  {
                      "name": "redirect_uri",
                      "in": "body",
                      "description": "Your Application's redirect URL. <b>It must match the redirect URL that was specified when the client was created.</b>",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "redirect_uri": "https://your-application.com/callback"
                          }
                      }
                  },
                  {
                      "name": "code",
                      "in": "body",
                      "description": "The authorization code issued by Canoe when the user approved the authorization request.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "code": "code"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      #Please go to the link below to authorize access.\n      https://api.canoesoftware.com/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code\n\n      #Please copy the 'YOUR_AUTHORIZATION_CODE' in the redirect url(YOUR_REDIRECT_URI?code=YOUR_AUTHORIZATION_CODE) after approving access\n      curl -X POST \"https://api.canoesoftware.com/oauth/token\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\" \\\n          -H \"Content-Type: application/x-www-form-urlencoded\" \\\n          -d \"grant_type=authorization_code&code=YOUR_AUTHORIZATION_CODE&redirect_uri=YOUR_REDIRECT_URI&client_id=YOUR_CLIENT_ID&client_secret=YOUR_CLIENT_SECRET\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const readline = require('readline');\n      const rl = readline.createInterface({\n          input: process.stdin,\n          output: process.stdout\n      });\n      const client_id = 'client_id';\n      const client_secret = 'client_secret';\n      const redirect_uri = 'https://your-application.com/callback';\n      const url = new URL(\"https://api.canoesoftware.com/oauth/authorize\");\n      let params = {\n          \"client_id\": client_id,\n          \"client_secret\": client_secret,\n          \"redirect_uri\": redirect_uri,\n          \"response_type\": 'code',\n      };\n      Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n      console.log('Please go to %s and authorize access.', url)\n      rl.question('Enter the authorization code returned in the callback URL.', (answer) => {\n          let code = answer;\n          let headers = {\n              \"Accept\": \"application/json\",\n              \"X-Requested-With\": \"XMLHttpRequest\",\n              \"Content-Type\": \"application/json\",\n          }\n          let body = {\n              'grant_type': \"authorization_code\",\n              'client_id': client_id,\n              'client_secret': client_secret,\n              'redirect_uri': redirect_uri,\n              'code': code,\n          };\n          axios.request('https://api.canoesoftware.com/oauth/token', {\n              method: \"POST\",\n              headers: headers,\n              data: body\n          })\n              .then(response => {\n                  console.log(response.data)\n              })\n              .catch(error => {\n                  console.log(error);\n              })\n          rl.close();\n      });\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      Route::get('/redirect', function () {\n          $query = http_build_query([\n          'client_id' => 'client-id',\n          'redirect_uri' => 'https://your-application.com/callback',\n          'response_type' => 'code',\n          'scope' => '',\n          ]);\n          return redirect('https://api.canoesoftware.com/oauth/authorize?'.$query);\n      });\n\n\n      Route::get('/callback', function (Request $request) {\n          $http = new GuzzleHttp\\Client;\n          $response = $http->post('https://api.canoesoftware.com/oauth/token', [\n              'form_params' => [\n                  'grant_type' => 'authorization_code',\n                  'client_id' => 'client-id',\n                  'client_secret' => 'client-secret',\n                  'redirect_uri' => 'https://your-application.com/callback',\n                  'code' => $request->code,\n              ],\n          ]);\n          return json_decode((string) $response->getBody(), true);\n      });\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      #This sample requires python OAuth library requests_oauthlib\n\n      from requests_oauthlib import OAuth2Session\n      import json\n      client_id = \"client_id\"\n      client_secret = \"client_secret\"\n      redirect_uri = \"https://your-application.com/callback\"\n      oauth = OAuth2Session(client_id, redirect_uri=redirect_uri)\n      authorization_url, state = oauth.authorization_url('https://api.canoesoftware.com/oauth/authorize')\n      print('Please go to {} and authorize access.'.format(authorization_url))\n      authorization_response = input('Enter the full callback URL')\n      token = oauth.fetch_token(\n      'https://api.canoesoftware.com/oauth/token',\n      authorization_response=authorization_response,\n      client_id=client_id,\n      client_secret=client_secret)\n      print(token)\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using System;\n      using System.Threading;\n      using RestSharp;\n\n      var client_id = \"your_client_id\";\n      var client_secret = \"your_client_secret\";\n      var redirect_uri = \"your_redirect_url\";\n      var baseUrl = \"https://api.canoesoftware.com\";\n      var client = new RestClient(baseUrl);\n      var request = new RestRequest(string.Format(\"/oauth/authorize?response_type=code&client_id={0}&client_secret={1}&redirect_uri={2}\",client_id, client_secret, System.Web.HttpUtility.UrlEncode(redirect_uri)), Method.Get);\n      var url = client.BuildUri(request).ToString();\n      //The below workflow assumes the user does not have control over the redirect_uri\n      //If the redirect_uri goes to your application, you can request a token by exchanging the authorization code directly\n      string auth_code = null;\n      var ps = new System.Diagnostics.ProcessStartInfo(url)\n      {\n          UseShellExecute = true,\n          Verb = \"open\"\n      };\n      //This will open your default browser\n      System.Diagnostics.Process.Start(ps);\n      //Please copy the 'THE_AUTHORIZATION_CODE' in the redirect url(YOUR_REDIRECT_URI?code=THE_AUTHORIZATION_CODE) after approving access \n      Console.WriteLine(\"Enter the authorization code returned in the callback URL:\");\n      string code = Console.ReadLine();\n      request = new RestRequest(\"/oauth/token\", Method.Post);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddParameter(\"grant_type\", \"authorization_code\");\n      request.AddParameter(\"code\", code);\n      request.AddParameter(\"client_id\", client_id);\n      request.AddParameter(\"client_secret\", client_secret);\n      request.AddParameter(\"redirect_uri\", redirect_uri);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AuthorizationCode"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Requesting Tokens - Refresh Token": {
          "post": {
              "tags": [
                  "Authentication"
              ],
              "summary": null,
              "description": "/oauth/token\n\n<p>Users can refresh their access tokens via the refresh token that was provided to them when the access token was issued.</p>\n<p>Users should issue a <code>POST</code> request to Canoe to request an access token. See examples on the right panel and the parameters for the <code>POST</code> request below.</p>\n",
              "operationId": "RequestingTokensRefreshToken",
              "parameters": [
                  {
                      "name": "grant_type",
                      "in": "body",
                      "description": "refresh_token.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "grant_type": "refresh_token"
                          }
                      }
                  },
                  {
                      "name": "client_id",
                      "in": "body",
                      "description": "Your Application's Client ID.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_id": "your_client_id"
                          }
                      }
                  },
                  {
                      "name": "client_secret",
                      "in": "body",
                      "description": "Your Application's Client Secret.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_secret": "your_client_secret"
                          }
                      }
                  },
                  {
                      "name": "refresh_token",
                      "in": "body",
                      "description": "The refresh_token issued by Canoe when the access token was issued.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "refresh_token": "def50200a24fe7672ce8653724d90090ca68fc4729a04b1051b2c8"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \"https://api.canoesoftware.com/oauth/token\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\" \\\n      -H \"Content-Type: application/x-www-form-urlencoded\" \\\n      -d \"grant_type=refresh_token&client_id=your_client_id&client_secret=your_client_secret&refresh_token=your_refresh_token\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"https://api.canoesoftware.com/oauth/token\");\n      let headers = {\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      }\n      let body = {\n        'grant_type': \"refresh_token\",\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'refresh_token': refresh_token,\n      }\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      }).then(response => response.json()) .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\"https://api.canoesoftware.com/oauth/token\", [\n          'headers' => [\n              \"Accept\" => \"application/json\",\n              \"X-Requested-With\" => \"XMLHttpRequest\",\n              \"Content-Type\" => \"application/json\",\n          ],\n          'json' => [\n              'grant_type'=> \"refresh_token\",\n              'client_id'=> \"your_client_id\",\n              'client_secret'=> \"your_client_secret\",\n              'refresh_token'=> \"your_refresh_token\",\n          ],\n      ]);\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = \"https://api.canoesoftware.com/oauth/token\"\n      headers = {\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      }\n      body = {\n          \"grant_type\": \"refresh_token\",\n          \"client_id\": \"your_client_id\",\n          \"client_secret\": \"your_client_secret\",\n          \"refresh_token\": \"def50200a24fe7672ce8653724d90090ca68fc4729a04b1051b2c8\"\n      }\n\n      response = requests.post(url, json.dumps(body), headers=headers, )\n      parsed = json.loads(response.text)\n      print(json.dumps(parsed, indent=4))\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"oauth/token\", Method.Post);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      request.AddParameter(\"grant_type\",\"refresh_token\");\n      request.AddParameter(\"client_id\",\"your_client_id\");\n      request.AddParameter(\"client_secret\",\"your_client_secret\");\n      request.AddParameter(\"refresh_token\",\"your_refresh_token\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AuthorizationCode"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Requesting Tokens - Client Credentials": {
          "post": {
              "tags": [
                  "Authentication"
              ],
              "summary": null,
              "description": "/oauth/token\n\n<p>Once a client has been created, you may use the <code>Client ID</code> and <code>Client Secret</code> to request an\nto request an access token. Access tokens provide access to all other endpoints within the API.</p>\n",
              "operationId": "RequestingTokensClientCredentials",
              "parameters": [
                  {
                      "name": "grant_type",
                      "in": "body",
                      "description": "The grant_type parameter must be set to \"client_credentials\".",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "grant_type": "client_credentials"
                          }
                      }
                  },
                  {
                      "name": "client_id",
                      "in": "body",
                      "description": "Your Application's Client ID.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_id": "client_credentials"
                          }
                      }
                  },
                  {
                      "name": "client_secret",
                      "in": "body",
                      "description": "Your Application's Client Secret.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "client_secret": "your_client_secret"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X POST \"https://api.canoesoftware.com/oauth/token\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\" \\\n      -H \"Content-Type: application/x-www-form-urlencoded\" \\\n      -d \"grant_type=client_credentials&client_id=your_client_id&client_secret=your_client_secret\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"https://api.canoesoftware.com/oauth/token\");\n      let headers = {\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      }\n      let body = {\n        'grant_type': \"client_credentials\",\n        'client_id': client_id,\n        'client_secret': client_secret,\n      }\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      }).then(response => response.json()) .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post(\"https://api.canoesoftware.com/oauth/token\", [\n          'headers' => [\n              \"Accept\" => \"application/json\",\n              \"X-Requested-With\" => \"XMLHttpRequest\",\n              \"Content-Type\" => \"application/json\",\n          ],\n          'json' => [\n              'grant_type'=> \"client_credentials\",\n              'client_id'=> \"your_client_id\",\n              'client_secret'=> \"your_client_secret\",\n          ],\n      ]);\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = \"https://api.canoesoftware.com/oauth/token\"\n      headers = {\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      }\n      body = {\n          \"grant_type\": \"client_credentials\",\n          \"client_id\": \"client_credentials\",\n          \"client_secret\": \"your_client_secret\",\n      }\n\n      response = requests.post(url, json.dumps(body), headers=headers, )\n      parsed = json.loads(response.text)\n      print(json.dumps(parsed, indent=4))\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"oauth/token\", Method.Post);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      request.AddParameter(\"grant_type\",\"client_credentials\");\n      request.AddParameter(\"client_id\",\"your_client_id\");\n      request.AddParameter(\"client_secret\",\"your_client_secret\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ClientCredentials"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Get Terms": {
          "get": {
              "tags": [
                  "Terms"
              ],
              "summary": null,
              "description": "/v1/terms\n\nFetch all terms accessible by the current API user.\n",
              "operationId": "GetTerms",
              "parameters": [
                  {
                      "name": "term_id",
                      "in": "query",
                      "description": "Specifying one or more IDs returns the specified Term(s).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "term_id single": {
                              "value": "term_id_1"
                          },
                          "term_id multiple": {
                              "value": "term_id_1,term_id_2,term_id_3"
                          }
                      }
                  },
                  {
                      "name": "name",
                      "in": "query",
                      "description": "The name of the Term.  This can either be the formal Term name or any of its associated aliases. To search based on a part of the fund name or alias, append an asterisk * character anywhere within the name parameter.  For example, searching Series* returns all Terms with names starting with Series.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "exact name": {
                              "value": "Series Term"
                          },
                          "part of name": {
                              "value": "Series*"
                          }
                      }
                  },
                  {
                      "name": "fund_name",
                      "in": "query",
                      "description": "Specifying a Fund name returns the Term(s) associated with the Fund.  This can either be the formal Fund name or any of its associated aliases.  To search based on a part of the Fund name or alias, append an asterisk * character anywhere within the name parameter.  For example, searching *LP returns all Terms associated with Fund names ending with LP.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "exact name": {
                              "value": "Fund Example"
                          },
                          "part of name": {
                              "value": "Fund*"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "query",
                      "description": "Specifying one or more IDs returns the Term(s) associated with the specified Fund(s).",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fund_id single": {
                              "value": "fund_id_1"
                          },
                          "fund_id multiple": {
                              "value": "fund_id_1,fund_id_2"
                          }
                      }
                  },
                  {
                      "name": "custom_field",
                      "in": "query",
                      "description": "An indexed string of one or more custom field IDs, which relate to term specific custom fields, and one or more custom field values for each. Specify the custom field ID and then the custom field value(s). When filtering on multiple values, separate them by commas.  Filter on additional custom fields by separating with an ampersand. Example:- /v1/funds?custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2&custom_field[867e4563-c2b5-e788-d050-4ce151dec635]=value1",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "custom_field": {
                              "value": "custom_field[bfa7ec21-9a73-4640-03b2-0e32aa1ae8a6]=value1,value2"
                          }
                      }
                  },
                  {
                      "name": "page",
                      "in": "query",
                      "description": "This page of results to retrieve.  For example, if you specify \"2\" you will receive all Terms on page 2.  The default is 1.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "page 1": {
                              "value": 1
                          },
                          "page 5 multiple": {
                              "value": 5
                          }
                      }
                  },
                  {
                      "name": "perPage",
                      "in": "query",
                      "description": "The number of Terms for each paginated download. The default is 100.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "3 per page": {
                              "value": 3
                          },
                          "50 per page": {
                              "value": 50
                          }
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields you need in the partial response. The value of the fields parameter must be a comma-separated (U+002C COMMA, \",\") list that refers to the name(s) of the fields to be returned.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      },
                      "examples": {
                          "fields": {
                              "value": "name,designation,aliases"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X GET \\\n          \"https://api.canoesoftware.com/v1/terms\" \\\n          -H \"Authorization: Bearer {token}\" \\\n          -H \"Accept: application/json\" \\\n          -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\n          \"https://api.canoesoftware.com/v1/terms\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"GET\",\n          headers: headers,\n      })\n          .then(response => response.json())\n          .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->get(\n          'https://api.canoesoftware.com/v1/terms',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/terms'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('GET', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/terms\", Method.Get);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetTerms"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Create A Single Term": {
          "post": {
              "tags": [
                  "Terms"
              ],
              "summary": null,
              "description": "/v1/terms\n\nCreate a new term based on the input parameters.\n",
              "operationId": "CreateSingleTerm",
              "parameters": [
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the Term.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "name": "Sample Term 1"
                          }
                      }
                  },
                  {
                      "name": "designation",
                      "in": "body",
                      "description": "The Term's designation. The available designations are draw, close, series or share_class",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "designation": "draw"
                          }
                      }
                  },
                  {
                      "name": "aliases",
                      "in": "body",
                      "description": "Aliases of the Term name. These are user-created. If there are multiple aliases, separate them by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "aliases": "Term Alias 1, Term Alias 2"
                          }
                      }
                  },
                  {
                      "name": "fund_id",
                      "in": "body",
                      "description": "The ID of the Fund to associate the Term. To retrieve these, use the v1/funds endpoint.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "fund_id": "fund_id_1"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": "The array of objects that contain the id of an existing custom field and a new value",
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "custom_fields": [
                                  {
                                      "id": 1,
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.id",
                      "in": "body",
                      "description": "ID of the fund custom field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": 1
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.value",
                      "in": "body",
                      "description": "The value of the custom Field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-               \n      curl -X POST \\\n      \"https://api.canoesoftware.com/v1/terms\" \\\n      -H \"Authorization: Bearer {token}\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\" \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"name\":\"Sample Term 1.\",\"designation\":\"draw\",\"aliases\":\"Sample Alias 1, Sample Alias 2\",\"fund_id\":\"fund_id_1\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"https://api.canoesoftware.com/v1/terms\");\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"name\": \"Sample Term 1\",\n          \"designation\": \"draw\",\n          \"aliases\": \"Sample Alias 1, Sample Alias 2\",\n          \"fund_id\": \"fund_id_1\"\n      }\n\n      fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          body: body\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-                  \n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->post('https://api.canoesoftware.com/v1/terms',\n        [\n            'headers' => [\n                'Authorization' => 'Bearer {token}',\n                'Accept' => 'application/json',\n                'X-Requested-With' => 'XMLHttpRequest',\n                'Content-Type' => 'application/json',\n            ],\n            'json' => [\n                'name' => 'Sample Term 1',\n                'designation' => 'draw',\n                'aliases' => 'Sample Alias 1, Sample Alias 2',\n                'fund_id' => 'fund_id_1',\n            ],\n        ]\n        );\n      $body = $response->getBody(); print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-                  \n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/terms'\n      payload = {\n          \"name\": \"Sample Term 1\",\n          \"designation\": \"draw\",\n          \"aliases\": \"Sample Alias 1, Sample Alias 2\",\n          \"fund_id\": \"fund_id_1\"\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('POST', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"/v1/terms\", Method.Post);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          name = \"Sample Term 1\",\n          designation = \"draw\",\n          aliases = \"Sample Alias 1, Sample Alias 2\",\n          fund_id = \"fund_id_1\"\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetTerms"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Update A Single Term": {
          "put": {
              "tags": [
                  "Terms"
              ],
              "summary": null,
              "description": "/v1/terms/{id}\n\nUpdate the specified term based on the input parameters.\n",
              "operationId": "UpdateSingleTerm",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the term to edit.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": 1
                      }
                  },
                  {
                      "name": "name",
                      "in": "body",
                      "description": "The name of the Term.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "name": "Sample Term 1"
                          }
                      }
                  },
                  {
                      "name": "designation",
                      "in": "body",
                      "description": "The Term's designation. The available designations are draw, close, series or share_class",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "designation": "draw"
                          }
                      }
                  },
                  {
                      "name": "aliases",
                      "in": "body",
                      "description": "Aliases of the Term name. These are user-created. If there are multiple aliases, separate them by commas.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "example": {
                              "aliases": "Term Alias 1, Term Alias 2"
                          }
                      }
                  },
                  {
                      "name": "custom_fields",
                      "in": "body",
                      "description": "The array of objects that contain the id of an existing custom field and a new value",
                      "required": false,
                      "schema": {
                          "type": "array",
                          "example": {
                              "custom_fields": [
                                  {
                                      "id": 1,
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.id",
                      "in": "body",
                      "description": "ID of the term custom field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "id": 1
                                  }
                              ]
                          }
                      }
                  },
                  {
                      "name": "custom_fields.*.value",
                      "in": "body",
                      "description": "The value of the term custom field.",
                      "required": true,
                      "schema": {
                          "type": "string",
                          "example": {
                              "downstream_ids": [
                                  {
                                      "value": 1000
                                  }
                              ]
                          }
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X PUT \\\n      \"https://api.canoesoftware.com/v1/terms/term_1\" \\\n      -H \"Authorization: Bearer {token}\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\" \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"name\":\"Sample Term 1.\",\"designation\":\"draw\",\"aliases\":\"Sample Alias 1, Sample Alias 2\"}'\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"https://api.canoesoftware.com/v1/terms/term_1\");\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      let body = {\n          \"name\": \"Sample Term 1\",\n          \"designation\": \"draw\",\n          \"aliases\": \"Sample Alias 1, Sample Alias 2\",\n      }\n\n      fetch(url, {\n          method: \"PUT\",\n          headers: headers,\n          body: body\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->put('https://api.canoesoftware.com/v1/terms/term_1',\n        [\n            'headers' => [\n                'Authorization' => 'Bearer {token}',\n                'Accept' => 'application/json',\n                'X-Requested-With' => 'XMLHttpRequest',\n                'Content-Type' => 'application/json',\n            ],\n            'json' => [\n                'name' => 'Sample Term 1',\n                'designation' => 'draw',\n                'aliases' => 'Sample Alias 1, Sample Alias 2'\n            ],\n        ]\n        );\n      $body = $response->getBody(); print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/terms/term_1'\n      payload = {\n          \"name\": \"Sample Term 1\",\n          \"designation\": \"draw\",\n          \"aliases\": \"Sample Alias 1, Sample Alias 2\",\n      }\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n      response = requests.request('PUT', url, headers=headers, json=payload)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"/v1/terms/term_1\", Method.Put);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      request.AddHeader(\"Content-Type\", \"application/json\");\n      var body = new\n      {\n          name = \"Sample Term 1\",\n          designation = \"draw\",\n          aliases = \"Sample Alias 1, Sample Alias 2\"\n      };\n      request.AddJsonBody(body);\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GetTerms"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "Delete A Single Term": {
          "delete": {
              "tags": [
                  "Terms"
              ],
              "summary": null,
              "description": "/v1/terms/{id}\n\nDelete a single term based on the term's id.\n",
              "operationId": "DeleteSingleTerm",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The id of the Term to delete.  Note that the final Term on a Fund cannot be deleted.  Use PUT v1/terms/{id} to update the Term or use DELETE v1/funds/{id} to delete the Fund, which will also delete the Term.  WARNING - This will delete the term as well as it's associated documents and allocations.",
                      "required": true
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "bash": {
                                  "description": "-\n      curl -X DELETE \\\n      \"https://api.canoesoftware.com/v1/terms/1\" \\\n      -H \"Authorization: Bearer {token}\" \\\n      -H \"Accept: application/json\" \\\n      -H \"X-Requested-With: XMLHttpRequest\"\n",
                                  "summary": "Bash"
                              },
                              "Javascript": {
                                  "description": "-\n      const url = new URL(\"\n          https://api.canoesoftware.com/v1/terms/1\"\n      );\n\n      let headers = {\n          \"Authorization\": \"Bearer {token}\",\n          \"Accept\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json\",\n      };\n\n      fetch(url, {\n          method: \"DELETE\",\n          headers: headers,\n      })\n      .then(response => response.json())\n      .then(json => console.log(json));\n",
                                  "summary": "JavaScript"
                              },
                              "PHP": {
                                  "description": "-\n      $client = new \\GuzzleHttp\\Client();\n      $response = $client->delete(\n          'https://api.canoesoftware.com/v1/terms/1',\n          [\n              'headers' => [\n                  'Authorization' => 'Bearer {token}',\n                  'Accept' => 'application/json',\n                  'X-Requested-With' => 'XMLHttpRequest',\n              ],\n          ]\n      );\n      $body = $response->getBody();\n      print_r(json_decode((string) $body));\n",
                                  "summary": "PHP"
                              },
                              "Python": {
                                  "description": "-\n      import requests\n      import json\n\n      url = 'https://api.canoesoftware.com/v1/terms/1'\n      headers = {\n        'Authorization': 'Bearer {token}',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n      response = requests.request('DELETE', url, headers=headers)\n      response.json()\n",
                                  "summary": "Python"
                              },
                              "CSharp": {
                                  "description": "-\n      using RestSharp;\n\n      var client = new RestClient(\"https://api.canoesoftware.com/\");\n      var request = new RestRequest(\"v1/terms/1\", Method.Delete);\n      request.AddParameter(\"Authorization\", string.Format(\"Bearer {token}\"), ParameterType.HttpHeader);\n      request.AddHeader(\"Accept\", \"application/json\");\n      request.AddHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      var response = client.Execute(request);\n      Console.WriteLine(response.Content);\n",
                                  "summary": "CSharp"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Success",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DeleteTerm"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid Term provided."
                  },
                  "422": {
                      "Description": "Single Term Response, if only one term exists on the fund.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "example": {
                                          "message": "5a2044f0-4db9-11ed-a40f-0242ac120004 cannot be deleted because it is the last Term on the parent Fund. Use the Delete a single Fund endpoint to delete the Fund ID: fund_id_1"
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  },
  "tags": [
      {
          "name": "Introduction",
          "description": ""
      },
      {
          "name": "Authentication",
          "description": ""
      },
      {
          "name": "Password Grant Tokens",
          "description": ""
      },
      {
          "name": "Documents",
          "description": ""
      },
      {
          "name": "Funds",
          "description": ""
      },
      {
          "name": "Terms",
          "description": ""
      },
      {
          "name": "Organizations",
          "description": ""
      },
      {
          "name": "Allocations",
          "description": ""
      },
      {
          "name": "User",
          "description": ""
      }
  ],
  "externalDocs": {
      "description": "Click to download docs in JSON format",
      "url": "api-docs-v1.json"
  },
  "components": {
      "schemas": {
          "Document": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "Unique ID of the document",
                      "example": "16"
                  },
                  "client_document_id": {
                      "type": "string",
                      "description": "Custom ID of the client document",
                      "example": "custom_id_16"
                  },
                  "name": {
                      "type": "string",
                      "description": "Name of the document",
                      "example": "Sample Hedge Fund Deal 1 - Entity A - Account Statement - 07/31/19"
                  },
                  "document_status": {
                      "type": "string",
                      "description": "Status of the document (e.g., Complete)",
                      "example": "Complete"
                  },
                  "category": {
                      "type": "string",
                      "description": "Category of the document (e.g., Capital Activity)",
                      "example": "Capital Activity"
                  },
                  "document_type": {
                      "type": "string",
                      "description": "Type of the document (e.g., Account Statement)",
                      "example": "Account Statement"
                  },
                  "source": {
                      "type": "string",
                      "description": "Source of the document (e.g., Upload Engine)",
                      "example": "Upload Engine"
                  },
                  "file_type": {
                      "type": "string",
                      "description": "Type of the file (e.g., \".pdf\")",
                      "example": ".pdf"
                  },
                  "original_file_name": {
                      "type": "string",
                      "description": "Original file name of the document",
                      "example": "Entity One - Sample HF Deal.pdf"
                  },
                  "document_tags": {
                      "type": "array",
                      "description": "Tags associated with the document",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "integer",
                                  "description": "Tag ID",
                                  "example": 1
                              },
                              "name": {
                                  "type": "string",
                                  "description": "Tag name",
                                  "example": "tag_1"
                              }
                          }
                      }
                  },
                  "reporting_frequency": {
                      "type": "string",
                      "description": "Reporting frequency of the document (e.g., Monthly)",
                      "example": "Monthly"
                  },
                  "uploaded": {
                      "type": "object",
                      "description": "Details about the document upload",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "Upload date in format 'YYYY-MM-DD HH:MM:SS'",
                              "example": "2019-04-30 20:51:38.000000"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "Timezone type",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "Timezone of the upload",
                              "example": "America/New_York"
                          }
                      }
                  },
                  "last_modified": {
                      "type": "object",
                      "description": "Details about the last modification",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "Last modified date in format 'YYYY-MM-DD HH:MM:SS'",
                              "example": "2019-09-16 11:38:47.000000"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "Timezone type",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "Timezone of the last modification",
                              "example": "America/New_York"
                          }
                      }
                  },
                  "last_modified_by": {
                      "type": "object",
                      "description": "Information about the user who last modified the document",
                      "properties": {
                          "user_id": {
                              "type": "string",
                              "description": "User ID of the modifier",
                              "example": "user_canoe"
                          },
                          "name": {
                              "type": "string",
                              "description": "Name of the user who modified the document",
                              "example": "canoe software"
                          },
                          "email": {
                              "type": "string",
                              "description": "Email address of the user who modified the document",
                              "example": "info@canoesoftware.com"
                          }
                      }
                  },
                  "document_approval": {
                      "type": "object",
                      "description": "Details about the approval of the document",
                      "properties": {
                          "approval_status": {
                              "type": "string",
                              "description": "Approval status of the document (e.g., Approved)",
                              "example": "Approved"
                          },
                          "approved_by": {
                              "type": "object",
                              "description": "Information about the user who approved the document",
                              "properties": {
                                  "user_id": {
                                      "type": "string",
                                      "description": "User ID of the approver",
                                      "example": "user_1"
                                  },
                                  "name": {
                                      "type": "string",
                                      "description": "Name of the user who approved the document",
                                      "example": "Allison Smith"
                                  },
                                  "email": {
                                      "type": "string",
                                      "description": "Email address of the user who approved the document",
                                      "example": "allison@example.com"
                                  }
                              }
                          },
                          "approval_date": {
                              "type": "object",
                              "description": "Approval date and time",
                              "properties": {
                                  "date": {
                                      "type": "string",
                                      "description": "Approval date in format 'YYYY-MM-DD HH:MM:SS'",
                                      "example": "2019-09-16 11:38:47.000000"
                                  },
                                  "timezone_type": {
                                      "type": "integer",
                                      "description": "Timezone type",
                                      "example": 3
                                  },
                                  "timezone": {
                                      "type": "string",
                                      "description": "Timezone of the approval date",
                                      "example": "America/New_York"
                                  }
                              }
                          }
                      }
                  },
                  "is_locked": {
                      "type": "boolean",
                      "description": "Indicates whether the document is locked or not",
                      "example": false
                  },
                  "number_of_pages": {
                      "type": "string",
                      "description": "Number of pages in the document",
                      "example": "1"
                  },
                  "file_size": {
                      "type": "integer",
                      "description": "Size of the file in bytes",
                      "example": 2000
                  },
                  "comment": {
                      "type": "string",
                      "description": "Current comment associated with the document",
                      "example": "current comment"
                  },
                  "comment_history": {
                      "type": "array",
                      "description": "History of comments for the document",
                      "items": {
                          "type": "object",
                          "properties": {
                              "document_id": {
                                  "type": "string",
                                  "description": "ID of the commented document",
                                  "example": "1"
                              },
                              "comment": {
                                  "type": "string",
                                  "description": "Comment text",
                                  "example": "comment"
                              },
                              "user_id": {
                                  "type": "string",
                                  "description": "User ID of the commenter",
                                  "example": "user_1"
                              },
                              "created_at": {
                                  "type": "string",
                                  "description": "Comment creation date in format 'YYYY-MM-DD HH:MM:SS'",
                                  "example": "2019-09-16 11:38:47.000000"
                              }
                          }
                      }
                  },
                  "assignee": {
                      "type": "string",
                      "description": "User ID of the assignee",
                      "example": "user_1"
                  },
                  "allocations": {
                      "type": "array",
                      "description": "List of allocations related to the document",
                      "items": {
                          "type": "object",
                          "properties": {
                              "allocation_id": {
                                  "type": "string",
                                  "description": "The ID of the allocation record",
                                  "example": "allocation_1"
                              },
                              "data_date": {
                                  "type": "string",
                                  "description": "Date of the data in format 'YYYY-MM-DD'",
                                  "example": "2019-07-31"
                              },
                              "dataset_type": {
                                  "type": "string",
                                  "description": "Type of the dataset (e.g., Account Statement)",
                                  "example": "Account Statement"
                              },
                              "investment": {
                                  "type": "string",
                                  "description": "Name of the investment",
                                  "example": "Sample Hedge Fund Deal 1"
                              },
                              "fund_sponsor": {
                                  "type": "string",
                                  "description": "Name of the fund sponsor",
                                  "example": "Sample Sponsor 1"
                              },
                              "custom_allocation_id": {
                                  "type": "string",
                                  "description": "Custom ID of the allocation",
                                  "example": "123"
                              },
                              "investment_id": {
                                  "type": "string",
                                  "description": "ID of the investment",
                                  "example": "1"
                              },
                              "investment_legal_name": {
                                  "type": "string",
                                  "description": "Legal name of the investment",
                                  "example": "Sample Hedge Fund Deal One"
                              },
                              "investment_extraction_aliases": {
                                  "type": "array",
                                  "description": "Aliases related to the investment extraction",
                                  "items": {
                                      "type": "string",
                                      "example": [
                                          "Sample Hedge Fund Deal 1 alias 1",
                                          "Sample Hedge Fund Deal 1 alias 2"
                                      ]
                                  }
                              },
                              "investment_structure": {
                                  "type": "string",
                                  "description": "Type of the investment structure (e.g., hedge_fund)",
                                  "example": "hedge_fund"
                              },
                              "entity": {
                                  "type": "string",
                                  "description": "Name of the entity",
                                  "example": "Entity One"
                              },
                              "entity_id": {
                                  "type": "string",
                                  "description": "ID of the entity",
                                  "example": "4"
                              },
                              "entity_extraction_aliases": {
                                  "type": "array",
                                  "description": "Aliases related to the entity extraction",
                                  "items": {
                                      "type": "string",
                                      "example": [
                                          "Entity One alias 1",
                                          "Entity One alias 2"
                                      ]
                                  }
                              },
                              "account": {
                                  "type": "string",
                                  "description": "Name of the account",
                                  "example": "Account One"
                              },
                              "account_id": {
                                  "type": "string",
                                  "description": "ID of the account",
                                  "example": "1"
                              },
                              "extracted_data": {
                                  "type": "object",
                                  "description": "Extracted data related to the allocation",
                                  "properties": {
                                      "entity": {
                                          "type": "string",
                                          "description": "Name of the entity",
                                          "example": "Entity One"
                                      },
                                      "fundName": {
                                          "type": "string",
                                          "description": "Name of the fund",
                                          "example": "Sample Hedge Fund Deal 1"
                                      },
                                      "endingDate": {
                                          "type": "string",
                                          "description": "Ending date in format 'MM/DD/YYYY'",
                                          "example": "07/31/2019"
                                      },
                                      "beginningDate": {
                                          "type": "string",
                                          "description": "Beginning date in format 'MM/DD/YYYY'",
                                          "example": "07/01/2019"
                                      },
                                      "endingBalance": {
                                          "type": "string",
                                          "description": "Ending balance as a string",
                                          "example": "4,111,305"
                                      },
                                      "beginningBalance": {
                                          "type": "string",
                                          "description": "Beginning balance as a string",
                                          "example": "4,036,960"
                                      },
                                      "otherFeesMTD": {
                                          "type": "string",
                                          "description": "Other fees for the month as a string",
                                          "example": "508"
                                      }
                                  }
                              },
                              "validated_data": {
                                  "type": "object",
                                  "description": "Validated data related to the allocation",
                                  "properties": {
                                      "entity": {
                                          "type": "string",
                                          "description": "Name of the entity",
                                          "example": "Entity One"
                                      },
                                      "fundName": {
                                          "type": "string",
                                          "description": "Name of the fund",
                                          "example": "Sample Hedge Fund Deal 1"
                                      },
                                      "endingDate": {
                                          "type": "string",
                                          "description": "Ending date in format 'YYYY-MM-DD'",
                                          "example": "2019-07-31"
                                      },
                                      "beginningDate": {
                                          "type": "string",
                                          "description": "Beginning date in format 'YYYY-MM-DD'",
                                          "example": "2019-07-01"
                                      },
                                      "endingBalance": {
                                          "type": "integer",
                                          "description": "Ending balance as an integer",
                                          "example": 4111305
                                      },
                                      "beginningBalance": {
                                          "type": "integer",
                                          "description": "Beginning balance as an integer",
                                          "example": 4036960
                                      },
                                      "otherFeesMTD": {
                                          "type": "integer",
                                          "description": "Other fees for the month as an integer",
                                          "example": 508
                                      }
                                  }
                              },
                              "validation_errors": {
                                  "type": "array",
                                  "description": "Validation errors related to the allocation",
                                  "items": {
                                      "type": "string"
                                  },
                                  "example": []
                              },
                              "analyst": {
                                  "type": "string",
                                  "description": "Name of the analyst",
                                  "example": "Allison"
                              },
                              "frequency": {
                                  "type": "string",
                                  "description": "Frequency of the allocation (e.g., monthly)",
                                  "example": "monthly"
                              },
                              "custom_fields": {
                                  "type": "array",
                                  "description": "Custom fields associated with the allocation",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "name": {
                                              "type": "string",
                                              "description": "Name of the custom field",
                                              "example": "CLIENT_ID"
                                          },
                                          "value": {
                                              "type": "string",
                                              "description": "Value of the custom field",
                                              "example": "BOX1"
                                          },
                                          "custom_field_id": {
                                              "type": "string",
                                              "description": "ID of the custom field",
                                              "example": "1"
                                          }
                                      }
                                  }
                              },
                              "document_groups": {
                                  "type": "object",
                                  "description": "Document groups associated with the allocation",
                                  "properties": {
                                      "transaction": {
                                          "type": "object",
                                          "properties": {
                                              "group_id": {
                                                  "type": "string",
                                                  "description": "ID of the transaction group",
                                                  "example": "transaction_group_id"
                                              },
                                              "member_document_ids": {
                                                  "type": "array",
                                                  "description": "IDs of the member documents in the group",
                                                  "items": {
                                                      "type": "string",
                                                      "example": [
                                                          "16",
                                                          "22",
                                                          "35"
                                                      ]
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "addepar_owned_id": {
                                  "type": "string",
                                  "description": "Addepar owned ID",
                                  "example": "AddeparOwned1"
                              },
                              "addepar_owner_id": {
                                  "type": "string",
                                  "description": "Addepar owner ID",
                                  "example": "AddeparOwner1"
                              },
                              "black_diamond_symbol": {
                                  "type": "string",
                                  "description": "Black Diamond symbol",
                                  "example": "BlackDiamondSymbol1"
                              },
                              "black_diamond_account": {
                                  "type": "string",
                                  "description": "Black Diamond account",
                                  "example": "BlackDiaAcc"
                              },
                              "fund_name": {
                                  "type": "string",
                                  "description": "The fund associated with the allocation.",
                                  "example": "Sample Hedge Fund Deal 1"
                              },
                              "term_id": {
                                  "type": "string",
                                  "description": "The term id with the allocation.",
                                  "example": "term_1"
                              },
                              "term_name": {
                                  "type": "string",
                                  "description": "The term associated with the allocation.",
                                  "example": "Sample Term 1"
                              },
                              "allocation_status": {
                                  "type": "string",
                                  "description": "The current status of the allocation. It can be either active, inactive or retired.",
                                  "example": "active"
                              },
                              "retired_date": {
                                  "type": "string",
                                  "description": "The date of when the allocation retires.",
                                  "example": "2017-12-31"
                              }
                          }
                      }
                  }
              }
          },
          "DocumentMetaData": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The id of the document that was updated.",
                      "example": "3"
                  },
                  "document_status": {
                      "type": "string",
                      "description": "The updated document status.",
                      "example": "Complete"
                  },
                  "approval_status": {
                      "type": "string",
                      "description": "The updated approval status of the document.",
                      "example": "Approved"
                  },
                  "comment": {
                      "type": "string",
                      "description": "The updated comment on the document.",
                      "example": "Sample Comment."
                  },
                  "tags": {
                      "type": "array",
                      "description": "The array of tags associated with the document.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The id of the tag.",
                                  "example": "1"
                              },
                              "name": {
                                  "type": "string",
                                  "description": "The name of the tag.",
                                  "example": "tag_1"
                              }
                          }
                      }
                  },
                  "client_document_id": {
                      "type": "string",
                      "description": "The client document id.",
                      "example": "custom_document_id."
                  }
              }
          },
          "UploadSingleDocument": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The document's ID at Canoe.",
                      "example": "canoe_document_id"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the uploaded document.",
                      "example": "uploaded_document_name"
                  },
                  "client_document_id": {
                      "type": "string",
                      "description": "The custom document ID user specified for the uploaded document.",
                      "example": "123"
                  }
              }
          },
          "Allocations": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The ID of the allocation.",
                      "example": "2"
                  },
                  "entity": {
                      "type": "string",
                      "description": "The name of the entity associated with the allocation.",
                      "example": "test_entity_1"
                  },
                  "entity_id": {
                      "type": "string",
                      "description": "The ID of the entity associated with the allocation.",
                      "example": "10"
                  },
                  "investment": {
                      "type": "string",
                      "description": "The name of the investment associated with the allocation.",
                      "example": "Fund One - Class A"
                  },
                  "investment_id": {
                      "type": "string",
                      "description": "The ID of the investment associated with the allocation.",
                      "example": "11"
                  },
                  "account": {
                      "type": "string",
                      "description": "The name of the account associated with the allocation.",
                      "example": "Account One"
                  },
                  "account_id": {
                      "type": "string",
                      "description": "The ID of the account associated with the allocation.",
                      "example": "12"
                  },
                  "initial_date": {
                      "type": "object",
                      "description": "The datetime of when the allocation first becomes active.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation first becomes active.",
                              "example": "2020-01-01"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the initial date.",
                              "example": "UTC"
                          }
                      }
                  },
                  "initial_amount": {
                      "type": "string",
                      "description": "The commitment amount of the allocation.",
                      "example": "500000"
                  },
                  "status": {
                      "type": "string",
                      "description": "The current status of the allocation. It can be either active or inactive.",
                      "example": "active"
                  },
                  "custom_allocation_id": {
                      "type": "string",
                      "description": "The custom ID of the allocation.",
                      "example": "13"
                  },
                  "created_at": {
                      "type": "object",
                      "description": "The datetime of when the allocation was created.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation was created.",
                              "example": "2020-12-01 00:00:00"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the creation date.",
                              "example": "UTC"
                          }
                      }
                  },
                  "updated_at": {
                      "type": "object",
                      "description": "The datetime of when the allocation was last updated.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation was last updated.",
                              "example": "2020-12-02 00:00:00"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the last update date.",
                              "example": "UTC"
                          }
                      }
                  },
                  "retired_at": {
                      "type": "object",
                      "description": "The datetime of when the allocation retires.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation retires.",
                              "example": null
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the retirement date.",
                              "example": "UTC"
                          }
                      }
                  },
                  "downstream_ids": {
                      "type": "array",
                      "description": "The allocation's downstream information.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The ID of the downstream system.",
                                  "example": "investment_metrics_account_short_name"
                              },
                              "name": {
                                  "type": "string",
                                  "description": "The name of the downstream system.",
                                  "example": "Account Short Name"
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of ID associated with the downstream system.",
                                  "example": "Investment Metrics"
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the downstream ID.",
                                  "example": "101112"
                              }
                          }
                      }
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom fields associated with the allocation.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field.",
                                  "example": "CLIENT_ID"
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field.",
                                  "example": null
                              },
                              "custom_field_id": {
                                  "type": "string",
                                  "description": "The ID of the custom field.",
                                  "example": "2"
                              }
                          }
                      }
                  },
                  "allocation_entity_aliases": {
                      "type": "array",
                      "description": "The allocation entity aliases.",
                      "items": {
                          "type": "string",
                          "example": "entity_alias_1"
                      }
                  },
                  "allocation_fund_aliases": {
                      "type": "array",
                      "description": "The allocation fund aliases.",
                      "items": {
                          "type": "string",
                          "example": "fund_alias_1"
                      }
                  },
                  "fund_name": {
                      "type": "string",
                      "description": "The fund associated with the allocation.",
                      "example": "Fund One"
                  },
                  "term_id": {
                      "type": "string",
                      "description": "The term id with the allocation.",
                      "example": "term_1"
                  },
                  "term_name": {
                      "type": "string",
                      "description": "The term associated with the allocation.",
                      "example": "Class A"
                  }
              }
          },
          "SingleAllocation": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The ID of the allocation.",
                      "example": "1"
                  },
                  "entity": {
                      "type": "string",
                      "description": "The name of the entity associated with the allocation.",
                      "example": "Sample Entity"
                  },
                  "entity_id": {
                      "type": "string",
                      "description": "The ID of the entity associated with the allocation.",
                      "example": "entity_1"
                  },
                  "investment": {
                      "type": "string",
                      "description": "The name of the investment associated with the allocation.",
                      "example": "Sample Investment"
                  },
                  "investment_id": {
                      "type": "string",
                      "description": "The ID of the investment associated with the allocation.",
                      "example": "investment_1"
                  },
                  "account": {
                      "type": "string",
                      "description": "The name of the account associated with the allocation.",
                      "example": "Sample Account One"
                  },
                  "account_id": {
                      "type": "string",
                      "description": "The ID of the account associated with the allocation.",
                      "example": "account_1"
                  },
                  "initial_date": {
                      "type": "object",
                      "description": "The datetime of when the allocation first becomes active.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation first becomes active.",
                              "example": "2021-01-01"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the initial date.",
                              "example": "America/New_York"
                          }
                      },
                      "example": {
                          "date": "2021-01-01",
                          "timezone_type": 3,
                          "timezone": "America/New_York"
                      }
                  },
                  "initial_amount": {
                      "type": "string",
                      "description": "The commitment amount of the allocation.",
                      "example": "10000"
                  },
                  "status": {
                      "type": "string",
                      "description": "The current status of the allocation. It can be either active or inactive.",
                      "example": "active"
                  },
                  "custom_allocation_id": {
                      "type": "object",
                      "description": "The custom ID of the allocation.",
                      "example": "700"
                  },
                  "created_at": {
                      "type": "object",
                      "description": "The datetime of when the allocation was created.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation was created.",
                              "example": "2021-01-01 12:00:15"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the creation date.",
                              "example": "America/New_York"
                          }
                      },
                      "example": {
                          "date": "2021-01-01 12:00:15",
                          "timezone_type": 3,
                          "timezone": "America/New_York"
                      }
                  },
                  "updated_at": {
                      "type": "object",
                      "description": "The datetime of when the allocation was last updated.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation was last updated.",
                              "example": "2021-01-01 12:00:15"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the last update date.",
                              "example": "America/New_York"
                          }
                      },
                      "example": {
                          "date": "2021-01-01 12:00:15",
                          "timezone_type": 3,
                          "timezone": "America/New_York"
                      }
                  },
                  "retired_at": {
                      "type": "object",
                      "description": "The datetime of when the allocation retires.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of when the allocation retires.",
                              "example": ""
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the retirement date.",
                              "example": "America/New_York"
                          }
                      },
                      "example": {
                          "date": "",
                          "timezone_type": 3,
                          "timezone": "America/New_York"
                      }
                  },
                  "downstream_ids": {
                      "type": "array",
                      "description": "The allocation's downstream information.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The ID of the downstream system."
                              },
                              "name": {
                                  "type": "string",
                                  "description": "The name of the downstream system."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of ID associated with the downstream system."
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the downstream ID."
                              }
                          }
                      },
                      "example": [
                          {
                              "id": "black_diamond_account_name",
                              "name": "Black Diamond",
                              "type": "Account Name",
                              "value": "sample_name"
                          }
                      ]
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom fields associated with the allocation.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field."
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field."
                              },
                              "ID": {
                                  "type": "string",
                                  "description": "The ID of the custom field."
                              }
                          }
                      },
                      "example": [
                          {
                              "name": "Sample Allocation Custom Field",
                              "value": "1000",
                              "ID": "1"
                          }
                      ]
                  },
                  "allocation_entity_aliases": {
                      "type": "array",
                      "description": "The allocation entity aliases.",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "entity_alias_1",
                          "entity_alias_2"
                      ]
                  },
                  "allocation_fund_aliases": {
                      "type": "array",
                      "description": "The allocation fund aliases.",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "fund_alias_1",
                          "fund_alias_2"
                      ]
                  },
                  "fund_name": {
                      "type": "string",
                      "description": "The fund associated with the allocation.",
                      "example": "Sample Investment"
                  },
                  "term_id": {
                      "type": "string",
                      "description": "The term id with the allocation.",
                      "example": "term_1"
                  },
                  "term_name": {
                      "type": "string",
                      "description": "The term associated with the allocation.",
                      "example": "Sample Term"
                  }
              }
          },
          "GetFunds": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The fund's ID.",
                      "example": "1"
                  },
                  "organization_id": {
                      "type": "string",
                      "description": "The ID of the organization that the fund is associated with.",
                      "example": "12"
                  },
                  "type": {
                      "type": "string",
                      "description": "The fund's investment type.",
                      "example": "direct_investment"
                  },
                  "status": {
                      "type": "string",
                      "description": "Indicates whether or not a fund is active. The status can be active, retired, or transitional.",
                      "example": "active"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the investment (fund + term).",
                      "example": "Sample Direct Deal 1"
                  },
                  "sponsor": {
                      "type": "string",
                      "description": "The sponsor of the fund.",
                      "example": "Sample Sponsor 1"
                  },
                  "start_date": {
                      "type": "string",
                      "description": "Fund Inception Date. The date on which the fund began its operations.",
                      "example": "2015-11-10"
                  },
                  "aliases": {
                      "type": "array",
                      "description": "Aliases of the investment name. These are user-created.",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "Sample Direct 1",
                          "SDD1"
                      ]
                  },
                  "legal_name": {
                      "type": "string",
                      "description": "The legal name of the fund.",
                      "example": "Sample Direct Deal 1 LP"
                  },
                  "updated_at": {
                      "type": "string",
                      "description": "A timestamp of when the fund was updated.",
                      "example": "2018-04-30 20:40:19"
                  },
                  "created_at": {
                      "type": "string",
                      "description": "A timestamp of when the fund was created.",
                      "example": "2018-04-30 20:40:19"
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom fields associated with the fund.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field."
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field."
                              },
                              "ID": {
                                  "type": "string",
                                  "description": "The ID of the custom field."
                              }
                          }
                      },
                      "example": [
                          {
                              "name": "CLIENT_ID",
                              "value": "BOX1",
                              "ID": "1"
                          }
                      ]
                  },
                  "requirements_preference": {
                      "type": "object",
                      "description": "The requirements preference of the fund.",
                      "properties": {
                          "account_statements": {
                              "type": "object",
                              "properties": {
                                  "balance": {
                                      "type": "string",
                                      "description": "Either ending_balance or price_units."
                                  }
                              }
                          }
                      },
                      "example": [
                          {
                              "account_statements": {
                                  "balance": "price_units"
                              }
                          }
                      ]
                  },
                  "term_id": {
                      "type": "string",
                      "description": "The ID of the term that is associated with the fund.",
                      "example": "1"
                  },
                  "fund_name": {
                      "type": "string",
                      "description": "The name of the fund.",
                      "example": "Sample Direct"
                  }
              }
          },
          "SingleFund": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The fund's ID.",
                      "example": "1"
                  },
                  "organization_id": {
                      "type": "string",
                      "description": "The ID of the organization that the fund is associated with.",
                      "example": "12"
                  },
                  "type": {
                      "type": "string",
                      "description": "The fund's investment type.",
                      "example": "direct_investment"
                  },
                  "status": {
                      "type": "string",
                      "description": "Indicates whether or not a fund is active. The status can be active, retired, or transitional.",
                      "example": "active"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the fund.",
                      "example": "Sample Direct Deal 1"
                  },
                  "sponsor": {
                      "type": "string",
                      "description": "The sponsor of the fund.",
                      "example": "Sample Sponsor 1"
                  },
                  "start_date": {
                      "type": "string",
                      "description": "Fund Inception Date. The date on which the fund began its operations.",
                      "example": "2015-11-10"
                  },
                  "aliases": {
                      "type": "array",
                      "description": "Aliases of the investment name. These are user-created.",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "Sample Direct 1",
                          "SDD1"
                      ]
                  },
                  "legal_name": {
                      "type": "string",
                      "description": "The legal name of the fund.",
                      "example": "Sample Direct Deal 1 LP"
                  },
                  "updated_at": {
                      "type": "string",
                      "description": "A timestamp of when the fund was updated.",
                      "example": "2018-04-30 20:40:19"
                  },
                  "created_at": {
                      "type": "string",
                      "description": "A timestamp of when the fund was created.",
                      "example": "2018-04-30 20:40:19"
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom fields associated with the fund.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field."
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field."
                              },
                              "ID": {
                                  "type": "string",
                                  "description": "The ID of the custom field."
                              }
                          }
                      },
                      "example": [
                          {
                              "name": "CLIENT_ID",
                              "value": "BOX1",
                              "ID": "1"
                          }
                      ]
                  },
                  "fund_name": {
                      "type": "string",
                      "description": "The name of the fund.",
                      "example": "Sample Direct Deal 1"
                  },
                  "requirements_preference": {
                      "type": "object",
                      "description": "The requirements preference of the fund.",
                      "properties": {
                          "account_statements": {
                              "type": "object",
                              "properties": {
                                  "balance": {
                                      "type": "string",
                                      "description": "Either ending_balance or price_units."
                                  }
                              }
                          }
                      },
                      "example": [
                          {
                              "account_statements": {
                                  "balance": "price_units"
                              }
                          }
                      ]
                  },
                  "term_id": {
                      "type": "string",
                      "description": "The ID of the term that is associated with the fund.",
                      "example": "123"
                  },
                  "term_name": {
                      "type": "string",
                      "description": "The name of the term",
                      "example": "Deal 1"
                  }
              }
          },
          "FundDocumentData": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The ID of the document in Canoe.",
                      "example": "1"
                  },
                  "client_document_id": {
                      "type": "string",
                      "description": "The custom document ID.",
                      "example": "custom_id_1"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the document. This contains the Investment Name (and its corresponding Entity Name), the Document Type, as well as the Data Date.",
                      "example": "Sample Hedge Fund Deal 1 - Entity A - Account Statement - 12/31/16"
                  },
                  "document_status": {
                      "type": "string",
                      "description": "This is the validation status determined by Canoe.",
                      "example": "Complete"
                  },
                  "category": {
                      "type": "string",
                      "description": "The category of the document.",
                      "example": "Capital Activity"
                  },
                  "document_type": {
                      "type": "string",
                      "description": "The document type. For example, Capital Call Notice and Account Statement are examples of two document types.",
                      "example": "Account Statement"
                  },
                  "source": {
                      "type": "string",
                      "description": "How the document entered Canoe.",
                      "example": "Upload Engine"
                  },
                  "file_type": {
                      "type": "string",
                      "description": "A document's file type, such as .PDF or .DOC. Canoe only supports extraction and validation of PDFs.",
                      "example": ".pdf"
                  },
                  "original_file_name": {
                      "type": "string",
                      "description": "The document's original file name including the file type extension.",
                      "example": "Entity A - Sample HF Deal.pdf"
                  },
                  "document_tags": {
                      "type": "array",
                      "description": "The list of tag objects (name, ID) assigned to the document.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The id of the tag.",
                                  "example": "1"
                              },
                              "name": {
                                  "type": "string",
                                  "description": "The name of the tag.",
                                  "example": "tag_1"
                              }
                          }
                      },
                      "example": [
                          {
                              "id": "1",
                              "name": "tag_1"
                          },
                          {
                              "id": "2",
                              "name": "tag_2"
                          }
                      ]
                  },
                  "reporting_frequency": {
                      "type": "string",
                      "description": "The reporting frequency (monthly, quarterly, or yearly) of the document, as determined based on the extracted fields.",
                      "example": "Monthly"
                  },
                  "uploaded": {
                      "type": "object",
                      "description": "The datetime of when the document was uploaded into Canoe.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of the upload.",
                              "example": "2018-04-30 20:51:38.000000"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the upload.",
                              "example": "America/New_York"
                          }
                      },
                      "example": {
                          "date": "2018-04-30 20:51:38.000000",
                          "timezone_type": 3,
                          "timezone": "America/New_York"
                      }
                  },
                  "last_modified": {
                      "type": "object",
                      "description": "The datetime of when the document was last updated.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "description": "The date of the last modification.",
                              "example": "2019-09-16 11:38:47.000000"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The timezone type.",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the last modification.",
                              "example": "America/New_York"
                          }
                      },
                      "example": {
                          "date": "2019-09-16 11:38:47.000000",
                          "timezone_type": 3,
                          "timezone": "America/New_York"
                      }
                  },
                  "last_modified_by": {
                      "type": "object",
                      "description": "The user who last updated the document.",
                      "properties": {
                          "user_id": {
                              "type": "string",
                              "description": "The user ID of the user.",
                              "example": "user_canoe"
                          },
                          "name": {
                              "type": "string",
                              "description": "The name of the user.",
                              "example": "canoe software"
                          },
                          "email": {
                              "type": "string",
                              "description": "The email address of the user.",
                              "example": "info@canoesoftware.com"
                          }
                      },
                      "example": {
                          "user_id": "user_canoe",
                          "name": "canoe software",
                          "email": "info@canoesoftware.com"
                      }
                  },
                  "is_locked": {
                      "type": "boolean",
                      "description": "The is_locked status of the document in Canoe.",
                      "example": false
                  },
                  "number_of_pages": {
                      "type": "string",
                      "description": "The number of pages of the document.",
                      "example": "1"
                  },
                  "file_size": {
                      "type": "integer",
                      "description": "The file size of the document.",
                      "example": 2000
                  },
                  "allocations": {
                      "type": "object",
                      "description": "The investment allocation data of the document.",
                      "properties": {
                          "allocation_id": {
                              "type": "string",
                              "description": "The ID of the allocation record",
                              "example": "allocation_1"
                          },
                          "data_date": {
                              "type": "string",
                              "description": "The effective date of the document.",
                              "example": "2016-12-31"
                          },
                          "dataset_type": {
                              "type": "string",
                              "description": "The dataset type. For example, Capital Call Notice and Account Statement are examples of two dataset types.",
                              "example": "Account Statement"
                          },
                          "investment": {
                              "type": "string",
                              "description": "The name of the investment that's associated with the document.",
                              "example": "Sample Hedge Fund Deal 1"
                          },
                          "fund_sponsor": {
                              "type": "string",
                              "description": "The name of the fund sponsor that's associated with the document.",
                              "example": "Sample Sponsor 1"
                          },
                          "custom_allocation_id": {
                              "type": "string",
                              "description": "The custom ID of the investment entity allocation that's associated with the document. This is user-created.",
                              "example": "123"
                          },
                          "investment_id": {
                              "type": "string",
                              "description": "The ID of the investment that's associated with the document.",
                              "example": "1"
                          },
                          "investment_legal_name": {
                              "type": "string",
                              "description": "The legal name of the investment that's associated with the document.",
                              "example": "Sample Hedge Fund Deal One"
                          },
                          "investment_extraction_aliases": {
                              "type": "array",
                              "description": "The aliases of the investment that are associated with the document. These are user-created.",
                              "items": {
                                  "type": "string"
                              },
                              "example": [
                                  "Sample Hedge Fund Deal 1 alias 1",
                                  "Sample Hedge Fund Deal 1 alias 2"
                              ]
                          },
                          "investment_structure": {
                              "type": "string",
                              "description": "The asset type of the fund that's associated with the document.",
                              "example": "hedge_fund"
                          },
                          "entity": {
                              "type": "string",
                              "description": "The name of the entity that's associated with the document. If the document is a general investment document that is not associated with a specific entity, this field will be Null.",
                              "example": "Entity A"
                          },
                          "entity_id": {
                              "type": "string",
                              "description": "The ID of the entity that's associated with the document. If the document is a general investment document that is not associated with a specific entity, this field will be Null.",
                              "example": "1"
                          },
                          "entity_extraction_aliases": {
                              "type": "array",
                              "description": "The aliases of the entity that are associated with the document. These are user-created.",
                              "items": {
                                  "type": "string"
                              },
                              "example": [
                                  "Entity A alias 1",
                                  "Entity A alias 2"
                              ]
                          },
                          "account": {
                              "type": "string",
                              "description": "The name of the account that's associated with the document.",
                              "example": "Demo"
                          },
                          "account_id": {
                              "type": "string",
                              "description": "The ID of the account that's associated with the document.",
                              "example": "3"
                          },
                          "extracted_data": {
                              "type": "object",
                              "description": "An object of the raw extracted data from the document.",
                              "example": {
                                  "entity": "Entity A",
                                  "fundName": "Sample Hedge Fund Deal 1",
                                  "endingDate": "12/31/2016",
                                  "beginningDate": "11/30/2016",
                                  "endingBalance": "4,111,305",
                                  "beginningBalance": "4,036,960",
                                  "otherFeesMTD": "395"
                              }
                          },
                          "validated_data": {
                              "type": "object",
                              "description": "An object of the formatted and validated data of the document. If the sign handling setting of the tenant is \"standard\", some data fields will be formatted and normalized. If the setting is \"as reported\", all data fields will only be formatted.",
                              "example": {
                                  "entity": "Entity A",
                                  "fundName": "Sample Hedge Fund Deal 1",
                                  "endingDate": "2016-12-31",
                                  "beginningDate": "2016-11-30",
                                  "endingBalance": 4111305,
                                  "beginningBalance": 4036960,
                                  "otherFeesMTD": 395
                              }
                          },
                          "validation_errors": {
                              "type": "object",
                              "description": "An object of the document's validation errors. Each item inside is a 'key:value' pair, where the \"key\" is the extracted field name and the \"value\" is the explanation of why the extracted value didn't pass Canoe's validation logic.",
                              "example": {}
                          },
                          "analyst": {
                              "type": "string",
                              "description": "The analyst associated with this fund.",
                              "example": "Allison"
                          },
                          "frequency": {
                              "type": "string",
                              "description": "How frequently this fund's statements come in. For example, if a statement comes in every month then the output will be \"monthly.\"",
                              "example": "monthly"
                          },
                          "custom_fields": {
                              "type": "array",
                              "description": "The list of custom field objects (name, value, ID) of the investment and/or allocation associated with the document.",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "name": {
                                          "type": "string",
                                          "description": "The name of the custom field."
                                      },
                                      "value": {
                                          "type": "string",
                                          "description": "The value of the custom field."
                                      },
                                      "ID": {
                                          "type": "string",
                                          "description": "The ID of the custom field."
                                      }
                                  }
                              },
                              "example": [
                                  {
                                      "name": "CLIENT_ID",
                                      "value": "BOX1",
                                      "ID": "1"
                                  }
                              ]
                          },
                          "document_groups": {
                              "type": "object",
                              "description": "Documents may be associated with other documents via document groups. A document may exist in multiple document groups (based on different criteria).",
                              "additionalProperties": true,
                              "example": {
                                  "transaction": {
                                      "group_id": "transaction_group_id",
                                      "member_document_ids": [
                                          "1",
                                          "22",
                                          "35"
                                      ]
                                  }
                              }
                          },
                          "addepar_owned_id": {
                              "type": "string",
                              "description": "The ID of the addepar owned entity that is associated with the document.",
                              "example": "AddeparOwned1"
                          },
                          "addepar_owner_id": {
                              "type": "string",
                              "description": "The ID of the addepar owner entity that is associated with the document.",
                              "example": "AddeparOwner1"
                          },
                          "black_diamond_symbol": {
                              "type": "string",
                              "description": "The Black Diamond symbol associated with the document.",
                              "example": "BlackDiamondSymbol1"
                          },
                          "black_diamond_account": {
                              "type": "string",
                              "description": "The Black Diamond account associated with the document.",
                              "example": "BlackDiaAcc"
                          },
                          "fund_name": {
                              "type": "string",
                              "description": "The name of the fund.",
                              "example": "Sample Direct Deal 1"
                          },
                          "term_id": {
                              "type": "string",
                              "description": "The ID of the term that is associated with the fund.",
                              "example": ""
                          }
                      }
                  }
              }
          },
          "FundDocumentId": {
              "type": "object",
              "properties": {
                  "total": {
                      "type": "integer",
                      "description": "The total number of document IDs.",
                      "example": 10
                  },
                  "ids": {
                      "type": "array",
                      "description": "An array of document IDs.",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "2345abcd-1234-1111-9876-1234567abc89",
                          "2345abcd-1234-1111-9876-1234567abc88",
                          "2345abcd-1234-1111-9876-1234567abc87",
                          "2345abcd-1234-1111-9876-1234567abc86",
                          "2345abcd-1234-1111-9876-1234567abc85",
                          "2345abcd-1234-1111-9876-1234567abc84",
                          "2345abcd-1234-1111-9876-1234567abc83",
                          "2345abcd-1234-1111-9876-1234567abc82",
                          "2345abcd-1234-1111-9876-1234567abc81",
                          "2345abcd-1234-1111-9876-1234567abc80"
                      ]
                  }
              }
          },
          "DeleteFunds": {
              "type": "object",
              "properties": {
                  "ids": {
                      "type": "array",
                      "description": "An array of fund IDs that were deleted.",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "id_1",
                          "id_2",
                          "id_3"
                      ]
                  },
                  "deleted": {
                      "type": "integer",
                      "description": "The total number of funds deleted.",
                      "example": 3
                  }
              }
          },
          "DeleteFund": {
              "type": "object",
              "properties": {
                  "message": {
                      "type": "string",
                      "description": "A confirmation that the fund ID was deleted.",
                      "example": "The Fund 5a2044f0-4db9-11ed-a40f-0242ac120004 was deleted."
                  }
              }
          },
          "GetTerms": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string",
                      "description": "The name of the Term.",
                      "example": "Series 2"
                  },
                  "id": {
                      "type": "string",
                      "description": "The Term's ID.",
                      "example": "a5176574-0948-11ee-9701-0a58a9feac02"
                  },
                  "designation": {
                      "type": "string",
                      "description": "The Term's designation.",
                      "example": "Series"
                  },
                  "aliases": {
                      "type": "array",
                      "description": "Aliases of the Term name. These are user-created.",
                      "items": {
                          "type": "string",
                          "example": [
                              "SFS2",
                              "SF-2"
                          ]
                      }
                  },
                  "created_at": {
                      "type": "string",
                      "description": "A timestamp of when the Term was created.",
                      "example": "2018-04-30 20:40:19"
                  },
                  "updated_at": {
                      "type": "string",
                      "description": "A timestamp of when the Term was updated.",
                      "example": "2018-04-30 20:40:19"
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom fields associated with the term.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field."
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field."
                              },
                              "ID": {
                                  "type": "string",
                                  "description": "The ID of the custom field."
                              }
                          }
                      },
                      "example": [
                          {
                              "name": "CLIENT_ID",
                              "value": "BOX1",
                              "ID": "1"
                          }
                      ]
                  },
                  "fund_name": {
                      "type": "string",
                      "description": "The name of the Fund to which the Term belongs.",
                      "example": "Sample Fund"
                  },
                  "fund_id": {
                      "type": "string",
                      "description": "The ID of the Fund to which the Term belongs.",
                      "example": "ba67e8d4-902d-11ed-bafd-0a58a9feac02"
                  },
                  "organization_id": {
                      "type": "string",
                      "description": "The ID of the Organization to which the Term’s Fund belongs.",
                      "example": "fb780fe2-b05f-11ec-a394-5717ed8c873f"
                  }
              }
          },
          "GetOrganization": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The organization's ID. The organization includes the accounts and entities.",
                      "example": "1"
                  },
                  "parent_id": {
                      "type": "string",
                      "description": "The ID of the organization's parent. The parent is also an organization.",
                      "example": "00"
                  },
                  "status": {
                      "type": "string",
                      "description": "Whether an organization is active or inactive.",
                      "example": "active"
                  },
                  "type": {
                      "type": "string",
                      "description": "The type of organization; this will be either account or entity.",
                      "example": "account"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the organization.",
                      "example": "Demo"
                  },
                  "aliases": {
                      "type": "array",
                      "description": "Aliases of the organization name. These are user-created.",
                      "items": {
                          "type": "string"
                      },
                      "example": []
                  },
                  "description": {
                      "type": "string",
                      "description": "A description of the organization specified by the user.",
                      "example": "Ex quia enim rem aut rerum. Quis eius consequatur impedit dolorem mollitia sed. Voluptate natus sed dolor quaerat. Et blanditiis ut unde aut qui."
                  },
                  "created_at": {
                      "type": "string",
                      "description": "A timestamp of when the organization was created.",
                      "example": "2017-06-18 23:42:52"
                  },
                  "updated_at": {
                      "type": "string",
                      "description": "A timestamp of when the organization was last updated.",
                      "example": "2019-04-09 10:18:05"
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom field objects (name, value, ID) of the organization.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field."
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field."
                              },
                              "custom_field_id": {
                                  "type": "string",
                                  "description": "The ID of the custom field."
                              }
                          }
                      },
                      "example": [
                          {
                              "name": "CLIENT_ID",
                              "value": "BOX1",
                              "custom_field_id": "1"
                          }
                      ]
                  },
                  "downstream_ids": {
                      "type": "array",
                      "description": "The organizations downstream information.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The ID of the downstream system"
                              },
                              "name": {
                                  "type": "string",
                                  "description": "The name of the downstream system."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of ID associated with the downstream system"
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the downstream ID."
                              }
                          }
                      },
                      "example": [
                          {
                              "id": "downstream_system_id",
                              "name": "downstream_system",
                              "type": "downstream",
                              "value": "123"
                          }
                      ]
                  }
              }
          },
          "GetSingleOrganizationData": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The ID of the document in Canoe.",
                      "example": "3"
                  },
                  "client_document_id": {
                      "type": "string",
                      "description": "The custom document ID.",
                      "example": "custom_id_3"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the document. This contains the Investment Name (and its corresponding Entity Name), the Document Type, as well as the Data Date.",
                      "example": "Sample Direct Deal 1 - Entity A - K-1"
                  },
                  "document_status": {
                      "type": "string",
                      "description": "This is the validation status determined by Canoe.",
                      "example": "Storage Only"
                  },
                  "category": {
                      "type": "string",
                      "description": "The category of the document.",
                      "example": "Tax"
                  },
                  "document_type": {
                      "type": "string",
                      "description": "The document type. For example, Capital Call Notice and Account Statement are examples of two document types.",
                      "example": "K-1"
                  },
                  "source": {
                      "type": "string",
                      "description": "How the document entered Canoe.",
                      "example": "Upload Engine"
                  },
                  "file_type": {
                      "type": "string",
                      "description": "A document's file type, such as .PDF or .DOC. Canoe only supports extraction and validation of PDFs.",
                      "example": ".pdf"
                  },
                  "original_file_name": {
                      "type": "string",
                      "description": "The document's original file name including the file type extension.",
                      "example": "TEST 1.pdf"
                  },
                  "document_tags": {
                      "type": "array",
                      "description": "The list of tag objects (name, ID) assigned to the document.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "integer",
                                  "example": 1
                              },
                              "name": {
                                  "type": "string",
                                  "example": "tag_1"
                              }
                          }
                      }
                  },
                  "reporting_frequency": {
                      "type": "string",
                      "description": "The reporting frequency (monthly, quarterly, or yearly) of the document, as determined based on the extracted fields.",
                      "example": null
                  },
                  "uploaded": {
                      "type": "object",
                      "properties": {
                          "date": {
                              "type": "string",
                              "example": "2018-08-30 20:51:38.000000"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "example": "America/New_York"
                          }
                      }
                  },
                  "last_modified": {
                      "type": "object",
                      "properties": {
                          "date": {
                              "type": "string",
                              "example": "2019-09-16 11:38:47.000000"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "example": 3
                          },
                          "timezone": {
                              "type": "string",
                              "example": "America/New_York"
                          }
                      }
                  },
                  "last_modified_by": {
                      "type": "object",
                      "properties": {
                          "user_id": {
                              "type": "string",
                              "example": "user_2"
                          },
                          "name": {
                              "type": "string",
                              "example": "Mike Smith"
                          },
                          "email": {
                              "type": "string",
                              "example": "mike@example.com"
                          }
                      }
                  },
                  "document_approval": {
                      "type": "object",
                      "properties": {
                          "approval_status": {
                              "type": "string",
                              "example": "Approved"
                          },
                          "approved_by": {
                              "type": "object",
                              "properties": {
                                  "user_id": {
                                      "type": "string",
                                      "example": "user_2"
                                  },
                                  "name": {
                                      "type": "string",
                                      "example": "Mike Smith"
                                  },
                                  "email": {
                                      "type": "string",
                                      "example": "mike@example.com"
                                  }
                              }
                          },
                          "approval_date": {
                              "type": "object",
                              "properties": {
                                  "date": {
                                      "type": "string",
                                      "example": "2019-09-16 11:38:47.000000"
                                  },
                                  "timezone_type": {
                                      "type": "integer",
                                      "example": 3
                                  },
                                  "timezone": {
                                      "type": "string",
                                      "example": "America/New_York"
                                  }
                              }
                          }
                      }
                  },
                  "is_locked": {
                      "type": "boolean",
                      "description": "The is_locked status of the document in Canoe.",
                      "example": false
                  },
                  "ready_for_extract": {
                      "type": "boolean",
                      "description": "The extraction status of the document in Canoe.",
                      "example": false
                  },
                  "number_of_pages": {
                      "type": "string",
                      "description": "The number of pages of the document.",
                      "example": "1"
                  },
                  "file_size": {
                      "type": "integer",
                      "description": "The file size of the document.",
                      "example": 2000
                  },
                  "allocations": {
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "allocation_id": {
                                  "type": "string",
                                  "description": "The ID of the allocation record",
                                  "example": "allocation_1"
                              },
                              "data_date": {
                                  "type": "string",
                                  "description": "The effective date of the document.",
                                  "example": "2017-12-31"
                              },
                              "dataset_type": {
                                  "type": "string",
                                  "description": "The dataset type. For example, Capital Call Notice and Account Statement are examples of two dataset types.",
                                  "example": "K-1"
                              },
                              "investment": {
                                  "type": "string",
                                  "description": "The name of the investment that's associated with the document.",
                                  "example": "Sample Direct Deal 1"
                              },
                              "fund_sponsor": {
                                  "type": "string",
                                  "description": "The name of the fund sponsor that's associated with the document.",
                                  "example": "Sample Sponsor 1"
                              },
                              "custom_allocation_id": {
                                  "type": "string",
                                  "description": "The custom ID of the investment entity allocation that's associated with the document. This is user-created.",
                                  "example": "124"
                              },
                              "investment_id": {
                                  "type": "string",
                                  "description": "The ID of the investment that's associated with the document.",
                                  "example": "2"
                              },
                              "investment_legal_name": {
                                  "type": "string",
                                  "description": "The legal name of the investment that's associated with the document.",
                                  "example": "Sample Direct Deal One"
                              },
                              "investment_extraction_aliases": {
                                  "type": "array",
                                  "description": "The aliases of the investment that are associated with the document. These are user-created.",
                                  "items": {
                                      "type": "string",
                                      "example": [
                                          "Sample Direct Deal 1  alias 1",
                                          "Sample Direct Deal 1  alias 2"
                                      ]
                                  }
                              },
                              "investment_structure": {
                                  "type": "string",
                                  "description": "The asset type of the fund that's associated with the document.",
                                  "example": "direct_investment"
                              },
                              "entity": {
                                  "type": "string",
                                  "description": "The name of the entity that's associated with the document. If the document is a general investment document that is not associated with a specific entity, this field will be Null.",
                                  "example": "Entity A"
                              },
                              "entity_id": {
                                  "type": "string",
                                  "description": "The ID of the entity that's associated with the document. If the document is a general investment document that is not associated with a specific entity, this field will be Null.",
                                  "example": "1"
                              },
                              "entity_extraction_aliases": {
                                  "type": "array",
                                  "description": "The aliases of the entity that are associated with the document. These are user-created.",
                                  "items": {
                                      "type": "string",
                                      "example": [
                                          "Entity A alias 1",
                                          "Entity A alias 2"
                                      ]
                                  }
                              },
                              "account": {
                                  "type": "string",
                                  "description": "The name of the account that's associated with the document.",
                                  "example": "Demo"
                              },
                              "account_id": {
                                  "type": "string",
                                  "description": "The ID of the account that's associated with the document.",
                                  "example": "3"
                              },
                              "extracted_data": {
                                  "type": "array",
                                  "description": "An object of the raw extracted data from the document.",
                                  "example": []
                              },
                              "validated_data": {
                                  "type": "array",
                                  "description": "An object of the formatted and validated data of the document.",
                                  "example": []
                              },
                              "validation_errors": {
                                  "type": "array",
                                  "description": "An object of the document's validation errors. Each item inside is a \"key:value\" pair, where the \"key\" is the extracted field name and the \"value\" is the explanation of why the extracted value didn't pass Canoe's validation logic.",
                                  "example": []
                              },
                              "analyst": {
                                  "type": "string",
                                  "description": "The analyst associated with this fund.",
                                  "example": "Mike"
                              },
                              "frequency": {
                                  "type": "string",
                                  "description": "How frequently this fund's statements come in. For example, if a statement comes in every month then the output will be \"monthly.\"",
                                  "example": "annually"
                              },
                              "custom_fields": {
                                  "type": "array",
                                  "description": "The list of custom field objects (name, value, ID) of the investment and/or allocation associated with the document.",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "name": {
                                              "type": "string",
                                              "example": "CLIENT_ID"
                                          },
                                          "value": {
                                              "type": "string",
                                              "example": "BOX1"
                                          },
                                          "custom_field_id": {
                                              "type": "string",
                                              "example": "1"
                                          }
                                      }
                                  }
                              },
                              "document_groups": {
                                  "type": "object",
                                  "description": "Documents may be associated with other documents via document groups. A document may exist in multiple document groups (based on different criteria).",
                                  "properties": {
                                      "transaction": {
                                          "type": "object",
                                          "properties": {
                                              "group_id": {
                                                  "type": "string",
                                                  "example": "transaction_group_id"
                                              },
                                              "member_document_ids": {
                                                  "type": "array",
                                                  "items": {
                                                      "type": "string",
                                                      "example": [
                                                          "3",
                                                          "22",
                                                          "35"
                                                      ]
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "addepar_owned_id": {
                                  "type": "string",
                                  "example": "AddeparOwned1"
                              },
                              "addepar_owner_id": {
                                  "type": "string",
                                  "example": "AddeparOwner1"
                              },
                              "black_diamond_symbol": {
                                  "type": "string",
                                  "example": "BlackDiamondSymbol1"
                              },
                              "black_diamond_account": {
                                  "type": "string",
                                  "example": "BlackDiaAcc"
                              },
                              "fund_name": {
                                  "type": "string",
                                  "description": "The name of the fund.",
                                  "example": "Sample Direct Deal 1"
                              },
                              "term_id": {
                                  "type": "string",
                                  "description": "The ID of the term that is associated with the fund.",
                                  "example": ""
                              },
                              "allocation_status": {
                                  "type": "string",
                                  "description": "The current status of the allocation. It can be either active, inactive or retired.",
                                  "example": "active"
                              },
                              "retired_date": {
                                  "type": "string",
                                  "description": "The date of when the allocation retires.",
                                  "example": "2017-12-31"
                              }
                          }
                      }
                  }
              }
          },
          "GetSingleOrganizationId": {
              "type": "object",
              "properties": {
                  "total": {
                      "type": "integer",
                      "description": "The total number of document IDs.",
                      "example": 10
                  },
                  "ids": {
                      "type": "array",
                      "description": "An array of document IDs.",
                      "items": {
                          "type": "string",
                          "example": [
                              "2345abcd-1234-1111-9876-1234567abc89",
                              "2345abcd-1234-1111-9876-1234567abc88",
                              "2345abcd-1234-1111-9876-1234567abc87",
                              "2345abcd-1234-1111-9876-1234567abc86",
                              "2345abcd-1234-1111-9876-1234567abc85",
                              "2345abcd-1234-1111-9876-1234567abc84",
                              "2345abcd-1234-1111-9876-1234567abc83",
                              "2345abcd-1234-1111-9876-1234567abc82",
                              "2345abcd-1234-1111-9876-1234567abc81",
                              "2345abcd-1234-1111-9876-1234567abc80"
                          ]
                      }
                  }
              }
          },
          "SingleEntity": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "The ID of the entity.",
                      "example": "1"
                  },
                  "parent_id": {
                      "type": "string",
                      "description": "The ID of the entity's parent account.",
                      "example": "00"
                  },
                  "name": {
                      "type": "string",
                      "description": "The name of the entity.",
                      "example": "Demo"
                  },
                  "aliases": {
                      "type": "array",
                      "description": "Aliases of the entity name. These are user-created. If there are multiple aliases, they should be separated by commas.",
                      "items": {
                          "type": "string"
                      },
                      "example": []
                  },
                  "created_at": {
                      "type": "object",
                      "description": "The datetime of when the entity was created.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The date of entity creation.",
                              "example": "2017-06-18 23:42:52"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The type of timezone associated with the datetime."
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the datetime."
                          }
                      }
                  },
                  "updated_at": {
                      "type": "object",
                      "description": "The datetime of when the entity was last updated.",
                      "properties": {
                          "date": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The date of the last update to the entity.",
                              "example": "2019-04-09 10:18:05"
                          },
                          "timezone_type": {
                              "type": "integer",
                              "description": "The type of timezone associated with the datetime."
                          },
                          "timezone": {
                              "type": "string",
                              "description": "The timezone of the datetime."
                          }
                      }
                  },
                  "downstream_ids": {
                      "type": "array",
                      "description": "The entity's downstream information.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The ID of the downstream system.",
                                  "example": "addepar_owner_id"
                              },
                              "name": {
                                  "type": "string",
                                  "description": "The name of the downstream system.",
                                  "example": "Addepar"
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of ID associated with the downstream system.",
                                  "example": "Owner ID"
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the downstream ID.",
                                  "example": "sample_name"
                              }
                          }
                      }
                  },
                  "custom_fields": {
                      "type": "array",
                      "description": "The list of custom fields associated with the entity.",
                      "items": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "type": "string",
                                  "description": "The name of the custom field.",
                                  "example": "CLIENT_ID"
                              },
                              "value": {
                                  "type": "string",
                                  "description": "The value of the custom field.",
                                  "example": "BOX1"
                              },
                              "custom_field_id": {
                                  "type": "string",
                                  "description": "The ID of the custom field.",
                                  "example": "1"
                              }
                          }
                      }
                  }
              }
          },
          "Token": {
              "type": "object",
              "properties": {
                  "token_type": {
                      "type": "string",
                      "description": "A parameter in the Access Token generation call within the Authorization server. This represents how an access_token will be generated and presented for resource access calls.",
                      "example": "Bearer"
                  },
                  "expires_in": {
                      "type": "integer",
                      "description": "The lifetime in seconds of the access token. For example, the value 3600 denotes that the access token will expire in one hour from the time the response was generated.",
                      "example": 3600
                  },
                  "access_token": {
                      "type": "string",
                      "description": "An access_token is a unique string of letters and numbers that you pass with an API call. The access token represents the authorization of a specific application to access specific parts of a user's data. Access tokens must be kept confidential both in transit and in storage.",
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjM5YjA4ZmZkZjQ5ZmRiNDYxMzk4MTY0ODNkMGVlNmNjMjA2ZmYxMDU1ODVhMDUwM2ViZmY3Mzg4OTMzN2I4NTI5Mzg1MWY5ZTBjN2YzYzNmIn0.eyJhdWQiOiJhZjFhMjVjNC1hNDE3LTEx\nZTktOTZmYy0wNmY3NWI2ZjJiNGEiLCJqdGkiOiIz\nOWIwOGZmZGY0OWZkYjQ2MTM5ODE2NDgzZDBlZTZjYzIwNmZmMTA1NTg1YTA1MDNlYmZmNzM4ODkzMzdiODUyOTM4NTFmOWUwYzdmM2MzZiIsImlhdCI6MTU2Mjg3NjI1MiwibmJmIjoxNTYyODc2MjUyLCJleHAiOjE1NjQx\nNzIyNTEsInN1YiI6IjE2MzhlZDRhLTY4MTItYTNh\nYy0wMDA1LTUzYmI5MjJjNGFiYiIsInNjb3BlcyI6W\n119.t7wflHG7Og9Vf1rqPWo2QzCyyAo3AUc9duZyoM\nEQ8dix5Omt5OWqHX6TWYddxbC34fvRi1Gby4CqK9Kz-s-0GMr2YnWxBPCzAIGlKMRVKbs615bQTpChG0a5BWzcUMOww1zhL9Gz8aSg2yI47kAHFnVPZFGH4zA2yqcRvmg7QvoYzQcm4hJR6NatMJgKOChagUDthdj-ezWwWq_pyCXZFU2XwLm1vBZTIkgG40uCbqgsEUffDXFibQypBG9BrUkw03o9wh72UoL-QeMHn5K5Q7zJx08pzOUXWm_W4pfO7FIwzaHoOEtFmorSihnw7gzDddwASwMzhYgqF839J7CLa_mq6YV53oMP2eCOKX0jN-dd\nEg4Gt6yYkVbh54yOsbztc4P1waUJ4JnJsBV2GdWd\nxnB0bhx6QFhj4HrnkQzx1GScFjRzKPHJGGmN9e-6wCEb7TXncbtnuu-8YxCbG5IUfc25BlBtMeqURE1A6Pa7YciBJoPLlEDUAJ8HwfSHspxDkuPhz1ospacDJgl\nxHn18Mrkt8lukwIL7dfhM9Wm2b6ZBJrKngFdkFV9ALFImjBwqk2SZVfhLMYvhTG36qGqI7e7uw_SyU2lPiN2MQcVpdaSd0NkCLqGAkRRwuDCaHBfZ35TJguJXHdJuRMDoghUAhYgAwqp7OU1FtgX1gmt5tok"
                  }
              }
          },
          "AuthorizationCode": {
              "type": "object",
              "properties": {
                  "token_type": {
                      "type": "string",
                      "description": "A parameter in the Access Token generation call within the Authorization server. This represents how an access_token will be generated and presented for resource access calls.",
                      "example": "Bearer"
                  },
                  "expires_in": {
                      "type": "integer",
                      "description": "The lifetime in seconds of the access token. For example, the value 3600 denotes that the access token will expire in one hour from the time the response was generated.",
                      "example": 86400
                  },
                  "access_token": {
                      "type": "string",
                      "description": "An access_token is a unique string of letters and numbers that you pass with an API call. The access token represents the authorization of a specific application to access specific parts of a user's data. Access tokens must be kept confidential both in transit and in storage.",
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjM5YjA4ZmZkZjQ5ZmRiNDYxMzk4MTY0ODNkMGVlNmNjMjA2ZmYxMDU1ODVhMDUwM2ViZmY3Mzg4OTMzN2I4NTI5Mzg1MWY5ZTBjN2YzYzNmIn0.eyJhdWQiOiJhZjFhMjVjNC1hNDE3LTEx\nZTktOTZmYy0wNmY3NWI2ZjJiNGEiLCJqdGkiOiIz\nOWIwOGZmZGY0OWZkYjQ2MTM5ODE2NDgzZDBlZTZjYzIwNmZmMTA1NTg1YTA1MDNlYmZmNzM4ODkzMzdiODUyOTM4NTFmOWUwYzdmM2MzZiIsImlhdCI6MTU2Mjg3NjI1MiwibmJmIjoxNTYyODc2MjUyLCJleHAiOjE1NjQx\nNzIyNTEsInN1YiI6IjE2MzhlZDRhLTY4MTItYTNh\nYy0wMDA1LTUzYmI5MjJjNGFiYiIsInNjb3BlcyI6W\n119.t7wflHG7Og9Vf1rqPWo2QzCyyAo3AUc9duZyoM\nEQ8dix5Omt5OWqHX6TWYddxbC34fvRi1Gby4CqK9Kz-s-0GMr2YnWxBPCzAIGlKMRVKbs615bQTpChG0a5BWzcUMOww1zhL9Gz8aSg2yI47kAHFnVPZFGH4zA2yqcRvmg7QvoYzQcm4hJR6NatMJgKOChagUDthdj-ezWwWq_pyCXZFU2XwLm1vBZTIkgG40uCbqgsEUffDXFibQypBG9BrUkw03o9wh72UoL-QeMHn5K5Q7zJx08pzOUXWm_W4pfO7FIwzaHoOEtFmorSihnw7gzDddwASwMzhYgqF839J7CLa_mq6YV53oMP2eCOKX0jN-dd\nEg4Gt6yYkVbh54yOsbztc4P1waUJ4JnJsBV2GdWd\nxnB0bhx6QFhj4HrnkQzx1GScFjRzKPHJGGmN9e-6wCEb7TXncbtnuu-8YxCbG5IUfc25BlBtMeqURE1A6Pa7YciBJoPLlEDUAJ8HwfSHspxDkuPhz1ospacDJgl\nxHn18Mrkt8lukwIL7dfhM9Wm2b6ZBJrKngFdkFV9ALFImjBwqk2SZVfhLMYvhTG36qGqI7e7uw_SyU2lPiN2MQcVpdaSd0NkCLqGAkRRwuDCaHBfZ35TJguJXHdJuRMDoghUAhYgAwqp7OU1FtgX1gmt5tok"
                  },
                  "refresh_token": {
                      "type": "string",
                      "description": "A refresh_token is a unique string of letters and numbers. Clients use refresh tokens to exchange a refresh token for an access token when the access token has expired. Refresh tokens will expire in 30 days.",
                      "example": "def50200a24fe7672ce8653724d90090ca68fc4729a04b1051b2c885f15e3ce77175eea08a4c94f6e8fc1cd82a50a1b5be47ccfab40f944308a9c694963c3a38bbdf32a825d1d085596d9afceffa2f2dfabe94394b0269926e82bf2b8f2c19d80d51d166425db9b187dce918a2db625353a86e57021689d508c5aad9950a48079f2ce194c34981906282c75ac5718c570f8bcae67d8725d95bc46159dd80c378a7d72a8eda0820c839aa268776bd67a1bbbae102155b3b6c188df55fec6d9abb043ca0ef7463e1416b8373379f93ceab463465844a16ee541da906abf87b0c41b6c1da469733a7\n9bf1ca175d6d0e7235ec0ff388ed247680047beef09f8bd645c4d34d4fe574d72980f65f8848cbe3e035232367b916d54ded682eca7194225f4c4804fc5c"
                  }
              }
          },
          "ClientCredentials": {
              "type": "object",
              "properties": {
                  "token_type": {
                      "type": "string",
                      "description": "A parameter in the Access Token generation call within the Authorization server. This represents how an access_token will be generated and presented for resource access calls.",
                      "example": "Bearer"
                  },
                  "expires_in": {
                      "type": "integer",
                      "description": "The lifetime in seconds of the access token. For example, the value 3600 denotes that the access token will expire in one hour from the time the response was generated.",
                      "example": 86400
                  },
                  "access_token": {
                      "type": "string",
                      "description": "An access_token is a unique string of letters and numbers that you pass with an API call. The access token represents the authorization of a specific application to access specific parts of a user's data. Access tokens must be kept confidential both in transit and in storage.",
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjM5YjA4ZmZkZjQ5ZmRiNDYxMzk4MTY0ODNkMGVlNmNjMjA2ZmYxMDU1ODVhMDUwM2ViZmY3Mzg4OTMzN2I4NTI5Mzg1MWY5ZTBjN2YzYzNmIn0.eyJhdWQiOiJhZjFhMjVjNC1hNDE3LTExZTktOTZmYy0wNmY3NWI2ZjJiNGEiLCJqdGkiOiIzOWIwOGZmZGY0OWZkYjQ2MTM5ODE2NDgzZDBlZTZjYzIwNmZmMTA1NTg1YTA1MDNlYmZmNzM4ODkzMzdiODUyOTM4NTFmOWUwYzdmM2MzZiIsImlhdCI6MTU2Mjg3NjI1MiwibmJmIjoxNTYyODc2MjUyLCJleHAiOjE1NjQxNzIyNTEsInN1YiI6IjE2MzhlZDRhLTY4MTItYTNhYy0wMDA1LTUzYmI5MjJjNGFiYiIsInNjb3BlcyI6W119.t7wflHG7Og9Vf1rqPWo2QzCyyAo3AUc9duZyoMEQ8dix5Omt5OWqHX6TWYddxbC34fvRi1Gby4CqK9Kz-s-0GMr2YnWxBPCzAIGlKMRVKbs615bQTpChG0a5BWzcUMOww1zhL9Gz8aSg2yI47kAHFnVPZFGH4zA2yqcRvmg7QvoYzQcm4hJR6NatMJgKOChagUDthdj-ezWwWq_pyCXZFU2XwLm1vBZTIkgG40uCbqgsEUffDXFibQypBG9BrUkw03o9wh72UoL-QeMHn5K5Q7zJx08pzOUXWm_W4pfO7FIwzaHoOEtFmorSihnw7gzDddwASwMzhYgqF839J7CLa_mq6YV53oMP2eCOKX0jN-ddEg4Gt6yYkVbh54yOsbztc4P1waUJ4JnJsBV2GdWdxnB0bhx6QFhj4HrnkQzx1GScFjRzKPHJGGmN9e-6wCEb7TXncbtnuu-8YxCbG5IUfc25BlBtMeqURE1A6Pa7YciBJoPLlEDUAJ8HwfSHspxDkuPhz1ospacDJglxHn18Mrkt8lukwIL7dfhM9Wm2b6ZBJrKngFdkFV9ALFImjBwqk2SZVfhLMYvhTG36qGqI7e7uw_SyU2lPiN2MQcVpdaSd0NkCLqGAkRRwuDCaHBfZ35TJguJXHdJuRMDoghUAhYgAwqp7OU1FtgX1gmt5tok"
                  }
              }
          },
          "DeleteTerm": {
              "type": "object",
              "properties": {
                  "message": {
                      "type": "string",
                      "description": "A confirmation that the term id was deleted.",
                      "example": "The Term 5a2044f0-4db9-11ed-a40f-0242ac120004 was deleted."
                  }
              }
          },
          "User": {
              "type": "object",
              "properties": {
                  "status": {
                      "type": "string",
                      "description": "Whether a user is active or inactive.",
                      "example": "active"
                  },
                  "email": {
                      "type": "string",
                      "description": "A user's email address.",
                      "example": "your-email@gmail.com"
                  },
                  "phone": {
                      "type": "string",
                      "description": "A user's phone number.",
                      "example": "1234567890"
                  },
                  "first_name": {
                      "type": "string",
                      "description": "A user's first name.",
                      "example": "Jane"
                  },
                  "last_name": {
                      "type": "string",
                      "description": "A user's last name.",
                      "example": "Doe"
                  },
                  "created_at": {
                      "type": "string",
                      "description": "A timestamp of when this user was created.",
                      "example": "2017-03-17 12:05:59"
                  }
              }
          },
          "Users": {
              "type": "object",
              "properties": {
                  "user_id": {
                      "type": "string",
                      "description": "The ID of the user.",
                      "example": "user_1"
                  },
                  "status": {
                      "type": "string",
                      "description": "Whether the user is active or inactive.",
                      "example": "active"
                  },
                  "email": {
                      "type": "string",
                      "description": "The user's email address.",
                      "example": "jane-doe@gmail.com"
                  },
                  "phone": {
                      "type": "string",
                      "description": "The user's phone number.",
                      "example": "(555) 123-4567"
                  },
                  "first_name": {
                      "type": "string",
                      "description": "The user's first name.",
                      "example": "Jane"
                  },
                  "last_name": {
                      "type": "string",
                      "description": "The user's last name.",
                      "example": "Doe"
                  },
                  "created_at": {
                      "type": "string",
                      "description": "The timestamp of when this user was created.",
                      "example": "2020-11-02 13:20:47"
                  }
              }
          }
      }
  }
}